Command processor:
------------------

1. add "alias" command which allows for multiline scripts to be referenced by single command:
   Like:
    esp32#>alias pwm_on                          <--- create an empty alias with name "pwm_on"
    esp32#pwm_on>echo silent                     
    esp32#pwm_on>pwm $1 5000 0.7
    esp32#pwm_on>pin 2 high
    esp32#pwm_on>uart 0
    esp32#pwm_on>write "PWM Enabled"
    esp32#pwm_on>exit                            <--- "exit" is the part of the alias
    esp32#pwm_on>echo on
    esp32#pwm_on>end                             <--- exit alias editing mode
    % Alias "pwm_on" is configured
    esp32#>pwm_on 3000

        list                                 <--- list alias content
        delete [ LINE_NUMBER | all]          <--- delete last line or LINE_NUMBER or all lines
  
2. Make command processor be able to expand $ values: $1 is argv[1] and $VarName is a sketch variable
    This is one of requirements for [1].

3. "watch" command which watches signal change on pin (neg,pos,rising,falling,any) and calls an alias

    watch PIN neg|pos|rising|falling|anyedge [SHELL_COMMAND | ALIAS]
    when no action is provided (a shell command or an alias) then the event is displayed to the user

4.  script(s?) storage in NVS

5. "exec" command which loads and executes a script either from NVRAM or from a filesystem

6. Upgrade command interpreter so it will recognize "@" symbol and supress echo until <Enter> is pressed
   to simulate DOS' "@echo off"

GPIO:
-----

1. add event system: configure GPIO masks which, if detected, trigger an alias:

    esp32#>if 0 1 !2   exec WaterTankOverflow
    esp32#>if !0 !1 !2 exec WaterTankUnderflow
    esp32#>if 2 exec Motor_Off
    esp32#>if 4<2048 poll 1000 exec Motor_On

    
    if COND1 COND2 ... CONDn [poll INTERVAL] exec TEXT
      COND := PIN_NUMBER | !PIN_NUMBER | PIN_NUMBER<VALUE | PIN_NUMBER>VALUE
      INTERVAL := Polling interval, ms
      checks if COND1 && COND2 .. && CONDn is true and executes TEXT (either a command or alias)
      By default uses GPIO ANYEDGE interrupts to evaluate CONDn, but can be forced to use polling (in sketches 
      with their own GPIO interrupt handlers, where ESPShell don't want to interfere with sketch logic)

2. add "pereodic" command: esp32#> periodic INTERVAL_SEC exec TEXT

3. add "toggle" keyword to "pin" command, to toggle output value betwen 1 and 0
   "pin 2 toggle read toggle read"
4. pin_save() on startup so subsequent pin_load() will be guaranteed to not load junk

PWM:
----

1. Implement phase shift between adjacent channels using .hpoint: adjacent channels share the same timer so their frequency 
   is the same, only DUTY and PHASE can be controlled

Sequence generator:
-------------------

1. add sequence capture (using RMT), captured sequence display and saving to a FS

2. make RMT's clock divisor be configurable

3. add support for byte strings (currently only bitstrings are recognized)


Pulse counter / Frequency meter:
--------------------------------

1. Add support for start/stop pin (i.e. hardware, externally controlled start/stop). This can improve accuracy: setting GPIO high/low from an PCNT interrupt handler
   is much faster than sending TaskNotification

File Manager:

1. Implement "mv" and "cp" commands

3. Port a single-user, single-threaded simple FTP server - to be able to upload a premade filesystem (i.e. files and directories)

