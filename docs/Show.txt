ESP32Shell for the Arduino Framework by vvb333007 <vvb@nym.hush.com>


DISPLAYING SYSTEM INFORMATION
-----------------------------

In ESPShell user can display various information (about the sketch, cpu, memory, etc)
by using dedicated "show" command.


General syntax for the command is as follows:


      "show KEYWORD ARG1 ARG2 ... ARGn"

KEYWORD is one of keywords from the list below. Depending on a keyword used there may
be 0, 1, 2 or more arguments. Some keywords are simply aliases to existing commands:
for example "show pin 10" is an alias to "pin 10" and "show cpu" is an alias to "cpu"
command. Eventually all information-displaying commands will be moved under "show"
umbrella



KEYWORDS
--------

"iomux" - This keyword is used to display an IO_MUX pin assignment: lists all possible
IO_MUX functions for every pin, displays current pin function. More on IO_MUX and GPIO Matrix
is on Espressif's ESP32 Technical Reference. Example output of the command:

    esp32#(/)>sh io
    % IO MUX has 5 functions for every pin. The mapping is as follows:
    % Pin | Function0 | Function1 | Function2 | Function3 | Function4
    %-----+-----------+-----------+-----------+-----------+-----------
    %  00 |     GPIO0*|     GPIO0 |  -undef-  |  -undef-  |  -undef-
    %  01 |     GPIO1*|     GPIO1 |  -undef-  |  -undef-  |  -undef-
    %  02 |     GPIO2*|     GPIO2 |  -undef-  |  -undef-  |  -undef-
    %  03 |     GPIO3*|     GPIO3 |  -undef-  |  -undef-  |  -undef-
    %  04 |     GPIO4*|     GPIO4 |  -undef-  |  -undef-  |  -undef-
    %  05 |     GPIO5*|     GPIO5 |  -undef-  |  -undef-  |  -undef-
    %  06 |     GPIO6*|     GPIO6 |  -undef-  |  -undef-  |  -undef-
    %  07 |     GPIO7*|     GPIO7 |  -undef-  |  -undef-  |  -undef-
    %  08 |     GPIO8*|     GPIO8 |  -undef-  | SUBSPICS1 |  -undef-
    %  09 |     GPIO9*|     GPIO9 |  -undef-  |  SUBSPIHD |    FSPIHD
    %  10 |    GPIO10*|    GPIO10 |   FSPIIO4 | SUBSPICS0 |   FSPICS0
    %  11 |    GPIO11*|    GPIO11 |   FSPIIO5 |   SUBSPID |     FSPID
    %  12 |    GPIO12*|    GPIO12 |   FSPIIO6 | SUBSPICLK |   FSPICLK
    %  13 |    GPIO13*|    GPIO13 |   FSPIIO7 |   SUBSPIQ |     FSPIQ
    %  14 |    GPIO14*|    GPIO14 |   FSPIDQS |  SUBSPIWP |    FSPIWP
    .... More lines ....

Note that all possible functions for the pin are displayed but only function currently
assigned to the pin is marked with an "*". On color terminals there is color marking also  
displayed (entries are displayed in reversed color).

To change function number one can use "pin .. iomux" command: one simple trick is to use
"pin A iomux B" command, to set pin A to function B. On every ESP32 model (except original ESP32)
function 0 is used to set pin to simple GPIO function via IO_MUX. To set pin to simple GPIO mode but
via GPIO Matrix one can use function #1. Original ESP32 has 6 functions available for every pin, with
function 0 acting as "simple GPIO via IO_MUX" and function 2 as "simple GPIO via GPIO_Matrix"


--


"cpu" - this keyword is just an alias  to the "cpu" command (same text will be displayed on execution 
of "cpu" command):

    esp32#(/)>show cpu
    % Hardware:
    % CPU ID: ESP32-S3, Rev.: 0.2
    % CPU frequency is 240Mhz, Xtal 40Mhz, APB bus 80Mhz
    % Chip temperature: 30.4 C
    %
    % Firmware:
    % Sketch is running on ESP32S3_DEV, an esp32s3 variant), uses:
    % Arduino Core version 3.1.1, which uses
    % Espressif ESP-IDF version "v5.3.2-282-gcfea4f7c98-dirty"
    % ESP32Shell library 0.99.1
    %
    % Last boot:
    % Last boot was 1 hour 2 minutes 24 seconds ago
    % Restart reason was "Board power-on"
    esp32#(/)>

Output is split into 3 sections: Hardware, Firmware and Last boot. First section contains CPUID, CPU frequency, 
xtal frequency, APB bus frequency and CPU core temperature. 

Second section provides version information on various components used to build the firmware/sketch: ArdunoCore version
(mismatched versions are common source of a headache), the ESP-IDF version and ESP32Shell own version number

Third section contains output of "uptime" command: uptime and reason for last reboot.

--

"sequence" - used to display information on configured sequences. Sequence is an instruction to ESP32 hardware to
generate pulse train of given properties. For example one can use sequences to generate IR-remote signals, implement
proprietary IR protocols (like NEC IR). 

Keyword uses 1 mandatory argument - a sequence number. Sequences are numbered starting from 0, and total of 10 sequences
can be created and used.


    Example output:

      esp32#>sh seq 0
      %
      % Sequence #0:
      % Resolution : 1.0000uS  (Frequency: 1000000 Hz)
      % Levels are
      % 1/50, 0/20, 1/100, 0/20, 1/100, 0/20, 1/50, 0/20,
      % 1/50, 0/20, 1/50, 0/20, 1/50, 0/20, 1/100, 0/20,
      % 1/50, 0/20, 1/100, 0/20, 1/50, 0/20, 1/50, 0/20,
      % 1/50, 0/20, 1/50, 0/20,
      % Total: 28 levels, duration: 1180 ticks, (~1180 uS)
      % Modulation  : yes, "LOW" are modulated at 100Hz, duty 30.00%
      % Bit sequence is : (14 bits) "10011110101111"
      % Zero is 1/100 0/20
      % One is 1/50 0/20
      % Hold LOW after transmission is done
      esp32#>

--
"mount" - Displays information about mounted filesystems: being used **without arguments** displays
information on available partitions and lists mountpoints for partitions already mounted:

    esp32#>sh mount
    % Disk partition |M|File system| Size on |    Mounted on    |Capacity |  Free
    %    label       |?|   type    |  flash  |                  |  total  |  space
    % ---------------+-+-----------+---------+------------------+---------+---------
    %             nvs| | NVStorage |     20K |                  |         |
    %         otadata| |  OTA data |      8K |                  |         |
    %         wwwroot|+| FAT/exFAT |    960K |         /wwwroot |    916K |    916K
    %            pr0n|+|    SPIFFS |    480K |                  |         |
    %            logs|+|  LittleFS |    480K |                  |         |
    %        coredump| | Core dump |     64K |                  |         |
    %
    % 3 mountable partitions found. (+) - mountable partition
    esp32#>
This keyword is an alias to "mount" filesystem command (see docs/Filesystem_Commands.txt on how
filesystems are used in ESPShell).


Used with 1 argument (a directory path) displays information on a given mountpoint:

    esp32#>sh mount /w
    % Mount point "/wwwroot",  FAT/exFAT , (partition label is "wwwroot")
    % Wear-levelling layer is active on this media
    % Filesystem is located on internal SPI FLASH
    esp32#>

--

"memory" - A keyword without arguments, used to display brief information on memory available
for the sketch (heap):

    esp32#>sh mem
    % -- Heap information --
    %
    % If using "malloc()" (default allocator))":
    % 8762556 bytes total, 8698576 available, 8257524 max per allocation
    %
    % If using "heap_caps_malloc(MALLOC_CAP_INTERNAL)", internal SRAM:
    % 373948 bytes total,  329836 available, 262132 max per allocation
    %
    % External SPIRAM detected (available to "malloc()"):
    % Total 8Mb, of them 19868 bytes are allocated
    esp32#>

--

"memory  ADDRESS  [COUNT] [C-TYPE]"
Displays a memory content, starting from a memory address ADDRESS. Address is expected to be a hex number
with or without leading "0x":

    esp32#>sh mem 0x3fc97a30
           0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F  |0123456789ABCDEF
    ----------------------------------------------------------+----------------
    0000: 01 00 00 00  02 00 00 00  03 00 00 00  9d ff ff ff  |................
    0010: 0c 0c 03 00  0b 00 00 00  5c 32 ca 3f  00 00 00 00  |........\2.?....
    0020: 14 0e 09 3c  2c 2b ff ff  00 c2 01 00  1c 00 00 08  |...<,+..........
    0030: 00 01 00 00  00 70 00 00  00 00 00 00  01 00 00 00  |.....p..........
    0040: 00 00 00 00  ff ff ff ff  00 00 00 00  00 00 00 00  |................
    0050: 00 00 00 00  00 00 00 00  00 00 00 00  02 00 00 00  |................
    0060: 00 00 00 00  ff ff ff ff  00 00 00 00  00 00 00 00  |................
    0070: 00 00 00 00  00 00 00 00  c8 7a c9 3f  ff ff 3f b3  |.........z.?..?.
    0080: 00 00 00 00  03 00 00 00  00 00 00 00  00 00 00 00  |................
    0090: 00 00 00 00  00 00 00 00  00 40 00 60  c8 bb 07 3c  |.........@.`...<
    00a0: 00 00 00 00  cc bb 07 3c  00 00 00 00  d0 bb 07 3c  |.......<.......<
    00b0: 00 00 00 00  d4 bb 07 3c  00 00 00 00  d8 bb 07 3c  |.......<.......<
    00c0: 00 00 00 00  dc bb 07 3c  00 00 00 00  e0 bb 07 3c  |.......<.......<
    00d0: 00 00 00 00  e4 bb 07 3c  00 00 00 00  e8 bb 07 3c  |.......<.......<
    00e0: 00 00 00 00  ec bb 07 3c  00 00 00 00  f0 bb 07 3c  |.......<.......<
    00f0: 00 00 00 00  f4 bb 07 3c  00 00 00 00  f8 bb 07 3c  |.......<.......<
    esp32#>

To specify number of elements to display, the COUNT argument may be used:

    esp32#>sh mem 0x3fc97a30 32
           0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F  |0123456789ABCDEF
    ----------------------------------------------------------+----------------
    0000: 01 00 00 00  02 00 00 00  03 00 00 00  9d ff ff ff  |................
    0010: 0c 0c 03 00  0b 00 00 00  5c 32 ca 3f  00 00 00 00  |........\2.?....
    esp32#>

To specify the data type one can use additional arguments: "signed", "unsigned", "char", "short", "int" and "void *".
Please note that if data type is specified then COUNT parameter defaults to 1, not to 256 as in first example above

    esp32#>sh mem 0x3fc97a30 unsigned int
    % 0x3fc97a30 : 1 (0x1 as hex)
    esp32#>

To display 3 elements of the same array:

    esp32#>sh mem 0x3fc97a30 3 unsigned int
    % Array of 3 elements, 4 bytes each
    %  Address   :  Value
    % 0x3fc97a30 : 1 (0x1 as hex)
    % 0x3fc97a34 : 2 (0x2 as hex)
    % 0x3fc97a38 : 3 (0x3 as hex)
    esp32#>

--
