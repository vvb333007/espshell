ESP32Shell for the Arduino Framework by vvb333007 <vvb@nym.hush.com>

ТЕКСТ УСТАРЕЛ, НЕ БЕЗНАДЕЖНО, НО ВСЕ-ЖЕ, ЧИТАЙТЕ АНГЛИЙСКУЮ ВЕРСИЮ, ПОКА НЕ ПОЯВИТСЯ ВРЕМЯ СДЕЛАТЬ АПДЕЙТ ДЛЯ РУССКОЙ ВЕРСИИ

Клавиши редактирования, используемые в ESPShell:
------------------------------------------------

<ENTER>        : Выполнить введеную команду

<- -> /\  \/   : Стрелки: левая и правая перемещают курсор, стрелки вверх и вниз
                 проматывают историю команд.
                 
<DEL>          : Как в Блокноте

<BACKSPACE>    : Как в Блокноте

<HOME>, <END>  : Не работают! Используйте Ctrl+A вместо <HOME> и Ctrl+E вместо <END>

<TAB>          : Нет, это не autocompletion. Про автонабор см. ниже. Клавиша <TAB> 
                 используется для быстрого перемещения между аргументами команды: 
                 повторные нажатия клавиши <TAB> перемещают курсор каждый раз к 
                 следующему слову в строке. Когда курсор доходит до конца строчки, 
                 он перемещается в начало.

<Ctrl>+R       : Поиск по истории введеных команд. Нажмите Ctrl+R, появится надпись 
                 "Search:". Начните набор команды, и после набора нескольких символов 
                 нажмите <Enter>: если похожая команда встречалась ранее, то она будет 
                 отоброжена вместе с ее аргументами. R в комбинации означает [R]everse
                 Search: поиск в истории команд ведется от более новых к более старым, 
                 в обратном направлении.

<Ctrl>+O       : Прокрутка истории команд (назад), если не работает клавиша "стрелка вверх"

<Ctrl>+P       : Прокрутка истории команд (вперед), если не работает клавиша "стрелка вниз"

<Ctrl>+K       : Стереть строчку от курсора и до конца

Ctrl+L         : Очистить экран терминала, сохранив, при этом, строку введеную пользователем

Ctrl+Z         : Равносильно вводу команды "exit" 

Ctrl+С         : Равносильно вводу команды "suspend": приостанавливает выполнение
                 скетча. Возобновить выполнение можно с помощтю команды "resume"

ESC, <BACKSPACE> : "Большой" <Backspace>, стирает сразу целое слово

ESC, ЧИСЛО, ESC : Нажав ESC, затем набрав десятичное число, и нажав ESC еще раз получаем 
                  ASCII символ с кодом равным этому самому десятичному числу. Например ввод 
                  последовательности <ESC>,3,<ESC> равноценен нажатию клавиши Ctrl+C (код 
                  Ctrl+C равен 3)


Вышеприведенный список можно посмотреть, выполнив команду "? keys". Так же
обратите внимание, что все комбинации с Ctrl не будут работать в ArduinoIDE
Serial Monitor, потому что там попросту нет возможности их ввести. Дополнительно, 
команда "? keys" отображает альтернативные варианты клавиш для "тупых" терминалов
на которых могут не работать клавиши-стрелки или клавиша ввода


АВТОЗАВЕРШЕНИЕ НАБОРА КОМАНД
----------------------------

Шелл НЕ будет за вас дописывать команду по нажатию клавиши <TAB>, как это сделано
в Linux shell. Вместо этого можно вводить команды и аргументы в сокращенном виде,
не нажимая <TAB>: ESPShell понимает то, что ему хотели, но поленились сказать.

Так, в linux shell для запуска команды "uptime" можно написать "upt" и нажать
клавишу <TAB> для того, чтобы linux shell дописал название команды полностью.

В ESPShell же можно просто написать "upt" (или даже "up") и просто нажать <Enter>
и шелл сам разберется, что ему такое написали.

КОНТЕКСТНАЯ ПОМОЩЬ
------------------

Обычно, для того, чтобы узнать о том, как та или иная команда применяется, и какие
у нее есть аргументы используется команда "?" с одним аргументом - названием команды
(например,  "? pin" выведет страничку помощи для команды "pin"). Если же вам понадобилось
по-быстрому глянуть страничку помощи, в процессе набора длинной команды (забыли, какой 
там следующий аргумент у команды, например), то можно просто нажать на знак вопросика "?"
и сразу же отобразится подсказка. В качестве эксперимента попробуйте написать слово
"cou" и нажать "?": должна отобразится страничка помощи команды "count".


ИСПОЛНЕНИЕ КОММАНД В ФОНЕ
-------------------------

По умолчанию команды блокируют дальнейшую работу с шеллом и в большинстве случаев нужно дожидаться
исполнения предидущей команды. Если же добавить символ "&" в качестве самого последнего аргумента к 
любой команде, то такая команда будет исполнятся в фоне: для ее выполнения будет создана отдельная 
FreeRTOS задача. Этот символ ("&") удобно использовать с "долгими" командами "pin" и "count".

  Пример использования:

    esp32#>pin 2 high delay 500 low delay 500 loop 9999 &

  Команда мигает светодиодом, присоедененном к GPIO2, в течении 9999 секунд, но запущена в фоне,
  поэтому сразу отдает управление. Для сравнения, попробуйте исполнить эту же команду но без "&"
  в конце.


ВСТРОЕННЫЕ КОМАНДЫ ESPSHELL
---------------------------

Список доступных команд может быть получен, если ввести знак вопроса и нажать <Enter>.
Знак вопроса - это тоже команда, которая просто выводит список доступных в данном 
контексте команд а так же их краткое описание. Выглядит это следующим образом:

  esp32#>?
  % Enter "? keys" to display the espshell keyboard help page
  %
  % "?"          : Commands list & help
  % "uptime"     : System uptime
  % "show"       : Display information
  % "pin"        : Pins (GPIO) commands
  % "cpu"        : Set/show CPU parameters
  % "reload"     : Reset CPU
  % "nap"        : CPU sleep
  % "iic"        : I2C commands                         *  
  % "uart"       : UART commands                        *
  % "sequence"   : Sequence configuration               *
  % "files"      : Filesystem access                    *
  % "echo"       : Enable/Disable user input echo
  % "suspend"    : Suspend sketch execution
  % "resume"     : Resume sketch execution
  % "kill"       : Kill tasks
  % "pwm"        : PWM output
  % "count"      : Pulse counter
  % "var"        : Sketch variables
  % "exit"       : Exit

Звездочками отмечены подразделы: введя соответствующую команду (например, "files")
мы попадаем в подкаталог комманд; введя знак вопроса, можно получить список команд
в данном подразделе. Описания их находятся в файлах вида "docs/ru_RU/*_Commands.txt"

Обратите внимание на тот факт, что все сообщения от espshell начинаются со знака
процента "%", что позволяет отфильтровывать сообщения espshell для упрощения 
программной обработки вывода. (См. так же команду "echo" ниже)

При вводе команд и их аргументов допускаются сокращения: например, вместо того,
чтобы вводить команду "sequence" можно написать "seq" или даже "se". При обработке
ввода, espshell производит поиск по частичному совпадению. Если же сопоставить
однозначно пользовательский ввод и команду не представляется возможным (например,
если просто ввести "r" - это может быть "reload" или "resume"), будет выполнена
команда идущая первой по списку. Таким образом, если просто ввести "r" и нажать
<Enter> произойдет перезагрузка (выполнится команда "reload")

Сокращать можно как команды, так и их аргументы. Ниже приведены две одинаковые
с точки зрения espshell уоманды:

  esp32#> pin 2 out open high
  esp32#> pi 2 ou hi"


Получить более подробное описание команды, ее аргументов и примеры использования
можно, введя знак вопроса, пробел и имя команды (например, "cpu"), нажать <Enter>

  esp32#> ? cpu

При наборе команды, если вы забыли ее синтаксис, можно нажать знак вопроса и тогда
будет выведена страница помощи по той команде, которую вы пытаетесь ввести. 
Попробуйте написать в строке ввода "count 4" и нажать знак вопроса.


ВСТРОЕННЫЕ КОМАНДЫ. ОПИСАНИЕ, ПРИМЕРЫ
-------------------------------------

"exit"     - Выход из подраздела (в подразделы можно попасть командами "uart", "iic", 
             "sequence", "camera"). Выполненная в корневом разделе, не делает ничего,
             за исключением особого случая: команда "exit exit" закрывает espshell и 
             удаляет соответствующую задачу. Память, занятая в процессе работы шелла
             не освобождается, конфигурация пинов и интерфейсов не восстанавливается

           - Так же в терминале можно нажать Ctrl+Z, что равносильно вводу команды
             "exit" и нажатию <Enter>. Комбинация Ctrl+Z не будет работать в Arduino
             Serial Monitor, но будет, например, в TeraTerm

"uptime"   - Показывает, сколько примерно времени прошло с момента последней загрузки.
             использует внутренний микросекундный таймер ESP32. Так же сообщается причина
             последней перезагрузки:

               esp32#>up
               % Last boot was 2 minutes 40 seconds ago
               % Restart reason was "reload command"
               esp32#>

"show"    - Показывает информацию о чем либо (например, о памяти) в зависимости от аргументов
            на данный момент поддерживается "show memory ... " , "show sequence ... ", 
            и "show mount ...". Описание аргументов команды show можно посмотреть, написав
            "show" и нажав знак вопроса ("?")
  



"pin"      - Одна из основных и часто используемых команд. Смотреть состояние пина, 
             читать или устанавливать значения, создавать простенькие последовательности 
             сигналов и и.п. В подробностях команда описана в файле
             "docs/ru_RU/Pin_commands.txt"
             
"cpu"      - Команда без параметров выводин информацию о частотах (процессора, кристалла
             и переферии) и температуре процессора. Так же отображается версия Arduino Core,
             версия используемого им ESP-IDF, название борды и варианта (ARDUINO_BOARD, ARDUINO_VARIANT):

                   esp32#>cpu

                   % CPU ID: ESP32-D0WD-V3, Rev.: 1.45
                   % CPU frequency is 240Mhz, Xtal 40Mhz, APB bus 80Mhz
                   % Chip temperature: 37.8ш C
                   %
                   % Sketch is running on ESP32_DEV/esp32,uses Arduino Core v3.0.5, based on
                   % Espressif ESP-IDF version "v5.1.4-828-g33fbade6b8-dirty"
                   % Last boot was 2 minutes 40 seconds ago
                   % Restart reason was "reload command"
                   esp32#>


           - Команда, введеная с одним параметром - числом, устанавливает частоту 
             центрального процессора. Частота задается в мегагерцах. Если заданная
             пользователем частота не поддерживается, будет выведен список поддерживаемых
             частот:

                   esp32#>cpu 99
                   % Supported frequencies are: 240, 160, 120, 80, 40, 20 and 10
                   esp32#>cpu 240
                   esp32#>



"mem"      - Информация о занятой\свободой памяти. Для процессоров со SPIRAM (PSRAM)
             так же отображается информация, но в килобайтах.

                   esp32#>mem
                   % -- Memory information --
                   % malloc():
                   % 308496 bytes total, 266924 available, 110580 max per allocation
                   % heap_caps_malloc():
                   % 369772 bytes total,  327348 available, 110580 max per allocation
                   esp32#>

             Обратите внимание: размер памяти, доступный дла аллокации функциями malloc()
             и heaps_caps_malloc(MALLOC_CAPS_INTERNAL) различается. Функция malloc() использует
             hep_caps_malloc(MALLOC_CAPS_DEFAULT). Внешняя SPIRAM(PSRAM) память доступна для
             использования только через heap_caps_malloc(MALLOC_CAPS_SPIRAM)

           - Отображение содержимого памяти:
             "show mem ADDRESS [ LENGTH ]"

              ADDRESS - это адрес, в шеснадцатиричной форме, например "abcd1234". 
              LENGTH  - это размер в байтах для отображения. Если не указан, то устанавливается
              равным 256.

              При выводе на экран от 15 и меньше байт, значения выводятся на экран без какого либо
              форматирования. Начиная с 16 байт содержимое памяти отображается в табличной форме,
              с указанием смещения и ASCII-эквивалентом:

                esp32#>mem 3fff0000 32
                       0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F  |0123456789ABCDEF
                ----------------------------------------------------------+----------------
                0000: 00 00 00 00  db d3 07 f8  da 22 1e 0c  20 81 01 00  |....лг.јк".. „..
                0010: 00 00 00 00  e9 04 02 2f  cc 05 08 40  ee 00 00 00  |....щ../Ь..@ю...
                esp32#>



"reload"   - Перезагрузка. Производится посредством esp_reset()

"nap"      - Команда, введеная без параметров, переводит процессор в режим сна,
             (light sleep). В качестве пробуждения ожидается активность на uart
             (тот, на котором запущен espshell) - при получении 3 битов "1" 
             процессор просыпается. Например, можно нажать(послать) "пробел"
             два раза.

           - Команда с параметром (числом) переводит процессор в режим light 
             sleep, в каяестве пробуждения установлен таймер - аргумент команды,
             время сна в секундах. Пробуждение по UART при этом невозможно.

"iic"      - Шина I2C. Введя, например,"iic 1" попадаем в подраздел с командами
             относящимеся к интерфейсу i2c1. Все команды, относящиеся к i2c 
             находятся этом подразделе. Чтобы выйти из него, нужно ввести "exit"
             или нажать Ctrl+Z. Работа с i2c подробно описана в 
             "docs/ru_RU/I2C_Commands.txt"

             Для того, чтобы исполнить команду, которой в подразделе нет, но которая
             есть "снаружи", в основном списке команд, выходить из этого подраздела
             не нужно: просто вводите команду. Шелл, если не видит команду в списке
             доступных всегда пытается найти команду еще и в списке основных.


"uart"     - Интерфейс UART. Так же, как и в вышеприведенной команде "iic", задается
             один параметр - номер интерфейса, с которым мы хотим работать, и который
             будем конфигурировать. Введя, например,"uart 1" попадаем в подраздел с 
             командами относящимеся к первому UART. Все команды, относящиеся к uart 
             находятся этом подразделе. Чтобы выйти из него, нужно ввести "exit"

             Для того, чтобы исполнить команду, которой в подразделе нет, но которая
             есть "снаружи", в основном списке команд, выходить из этого подраздела
             не нужно: просто вводите команду. Шелл, если не видит команду в списке
             доступных всегда пытается найти команду еще и в списке основных.

             Работа с UART подробно описана в "docs/ru_RU/UART_Commands.txt"
             Используйте команду "uart 0" с осторожностью, а то espshell отвалится :)

            

"sequence" - Конструирование всяких разных последовательностей (сигнала), для 
             последующей их отправки через какой-либо пин. Последовательности могут
             быть разного толка - от мигания светодиодом, до сигналов IR remote.
             В подробностях описана в "docs/ru_RU/Pulse_Generator.txt"

             Для того, чтобы исполнить команду, которой в подразделе нет, но которая
             есть "снаружи", в основном списке команд, выходить из этого подраздела
             не нужно: просто вводите команду. Шелл, если не видит команду в списке
             доступных всегда пытается найти команду еще и в списке основных.


"files"    - Перейти в режим менеджера файлов. Подробнее о менеджере файлов написано
             в файле документации "docs/ru_RU/Filesystem_Commands.txt"


"echo off" - Аналог команды AT модема "ATE0". Выключает вывод сообщений от espshell
             (но не вывод команд!). В частности, пропадает строка приглашения, ввод
             пользователя не посылается назад. Команда предназначена для упрощения
             автоматизации управления через espshell

"echo on"  - Режим по умолчанию.

"echo silent" - Запретить ESPShell любой вывод на экран. Команды будут исполняться, но их
             вывод на экран будт заблокирован. Сообщения об ошибках, как и прочие сообщения
             espshell будут заблокированы.

"suspend"  - Приостановить выполнение скетча (а именно - Arduino loop()). Задачи, 
             запущенные из функции loop() не приостанавливаются.

"resume"   - Продолжить выполнение скетча, приостановленного командой "suspend"

"pwm"      - Генератор прямоугольных импульсов заданной частоты и скважности. Частота
             задается в герцах, а скважность - число с плавающей точкой, от 0 до 1.
             Команда включает генератор на заданном пине, генерация происходит
             в фоне. Подробнее описано в "docs/ru_RU/Tone_Generator_And_Pulse_Counter.txt"

"count"    - Счетчикк импульсов. Позволяет посчитать количество пришедших импульсов на
             данном пине в течении указанного времени. 
             Подробнее описано в "docs/ru_RU/Tone_Generator_And_Pulse_Counter.txt"

"var"        Изменить\посмотреть значение переменной из пользовательского скетча. Переменная.
             конечно, должна быть зарегистрирована (для этого надо включить файл "extra/espshell.h")
             где находится API convar_add(VariableName) и использовать этот макрос, где-нибудь в setup()
             вашего скетча, для того, чтобы сообшить шеллу, что такие-то переменные должны быть доступны
             из командной строки.  Пример использования находится в файле-примере "example_blink.ino":
             там регистрируются три различных переменных, которые можно смотреть\изменять командой "var"

             Команда, написанная без какиз-либо дополнительных аргументов, выводит список всех
             зарегистрированных переменных, если таковые имеются:

               esp32#>var
               % Registered variables:
               % "Short", 2 bytes long
               % "Char", 1 bytes long
               % "test", 4 bytes long
               esp32#>
             

             "var NAME" - Команда с одним аргументом: просмотр значения переменной

               esp32#>var Short
               % "Short" == Unsigned: 65535, or Signed: -1 (hex: ffff)
               esp32#>

             ESPShell выведет на экран все возможные представления переменной: как если бы она была знаковым, 
             беззнаковым или числом с плавающей точкой. В примере выше для переменной "Short" было выведено
             ее значение в трех разных представлениях.

             "var NAME VALUE" - Команда с двумя аргументами, устанавливает новое значение переменной NAME.
              Второй параметр, VALUE, должен быть числом, в десятичной форме, положительным или отрицательным,
              целым или с плавающей точкой

             "var NUMBER" - отобразить число (шеснадцатиричное, восбмеричное или двоичное) в разных представлениях


