Фаловые системы ESP32
---------------------

По состоянию на конец 2024 года в числе официально поддерживаемых (с разной 
степенью оффициальности) находятся три файловые системы:

 1. SPIFFS, так называемая [SPI] [F]lash [F]ile [S]ystem, совсем простенькая
    файловая система, не поддерживающая каталоги. Впрочем, некоторая симуляция 
    каталогов все же есть: можно, например, создать файл с именем 
    "/some/file/name.txt" который "как бы"  находится в кталогах, но на самом
    деле, это просто такое имя файла - со слешами.

 2. FAT. Старый добрый FAT (12/16/ex, все расширения). В отличии от остальных
    файловых систем использует библиотеку wear_levelling, призванную уменьшать
    неравномерность износа карты памяти

 3. LittleFS (официальная страничка: https://github.com/littlefs-project/littlefs, 
    порт для ESP32 делается другими ребятами. 
    Из достоинств - написана специально для flash памяти, усредняет нагрузку 
    на флеш и, по заявлению авторов, устойчива к пропаданию питания.

Все три вышеозначенные файловые системы поддерживаются оболочкой.

В каталоге "extra/" лежит файлик partitions.csv: если такой файлик положить
в каталог к своему скетчу, то Arduino IDE создаст разделы во флеш памяти
согласно данным из этого файла. В файлике создаются все три файловые системы:
в обычной жизни достаточно одной. Сам ESPShell можно скомпилировать с выборочной
поддержкой файловых систем, чтобы уменьшить размер занимаемой памяти: для этого
нужно установить в нулевое значение один или несколько параметров

 WITH_SPIFFS
 WITH_FAT
 WITH_LITTLEFS

Сделать это можно либо в "extra/espshell.h" либо непосредственно в espshell.c,
(поищите словосочетание TAG:settings для ориентира)


НАЗНАЧЕНИЕ
----------

Основное предназначение фалового менеджера в ESPShell это создание,удаление,
копирование и переименовывание фалов и каталогов, которые использует скетч:
файлы настроек, базы данных, логи, веб страницы и тому подобное.

Файловый менеджер позволяет просматривать бинарные и текстовые файлы, выводя 
их или на экран или отсылаяв один из UART портов. Один из сценарие использования
широко распостраненного LTE модема компании Simcom SIM7600E подразумевает 
использование файловой системы модема: у него на борту 64 гигабайта памяти, 
доступных для записи туда файлов для последубщей отсылки по internet. Этот
модем, являясь UART устройством, принимает файлы по UART интерфейсу, как раз
в том виде, в котором ESPShell умеет их посылать. 
Так совпало.

Для текстовых файлов так же доступны операции "insert", "append" и "delete":
вставка и удаление строк, дописывание строк в конец файла: для небольших 
правок "по месту"


КОМАНДЫ
-------

  ВАЖНЫЕ МОМЕНТЫ: 
    1. Звездочки вместо пробелов: если есть нужда работать с именами файлов и 
       каталогов, где есть пробелы, то следует использовать звездочку (*) вместо 
       пробелов. Оболочка преобразовывает все звездочки в пробелы.

    2. Автозавершения имен файлов или каталогов по нажатию на <TAB> нет. Реализация 
       этого утяжелит и без того тяжелый код оболочки. Все же сценарии работы с 
       фалами на обычной Linux системе и ESP32 различны: на ESP32 файловые операции 
       обычно не часты и просты

    3. path wildcards (звездочки, знаки вопроса и т.п.) не поддерживаются. Если нужно
       удалить сто фалов img1, img2, img100 , то придется сто раз вызывать команду "rm"
       (если только эти файлы не в каталоге, который можно удалить целиком)


Войти в режим файлового менеджера можно введя команду "files" (выйти можно командой
"exit" или нажатием Ctrl+Z в окне терминала):

  esp32#>files
  % Entering filesystem mode. Ctrl+Z or "exit" to return
  % Hint: Main commands are still avaiable (but not visible in "?" command list)
  esp32#(/)>

В строке приглашения теперь появился символ "/" - это текущий рабочий каталог.
В этом каталоге можно создавать только точки монтирования других файловых систем. Каталог
этот - виртуальный, его нельзя отформатировать или создать в нем файл. Каталоги в нем
создаются командой "mount"


"mount"
"mount LABEL [/PATH]"
---------------------
Команда "mount" имеет две функции: вывести на экран таблицу разделов диска с указанием
смонированных систем и, собственно, монтирование систем. Команда "mount" без параметров
выводит на экран таблицу разделов:

  esp32#(/)>mount
  % Disk partition |M|File system| Size on |    Mounted on    |Capacity |  Free
  %    label       |?|   type    |  flash  |                  |  total  |  space
  % ---------------+-+-----------+---------+------------------+---------+---------
  %             nvs| | NVStorage |     20K |                  |         |
  %         otadata| |  OTA data |      8K |                  |         |
  %         wwwroot|+| FAT/exFAT |    960K |                  |         |
  %            pr0n|+|    SPIFFS |    480K |                  |         |
  %            logs|+|  LittleFS |    480K |                  |         |
  %        coredump| | Core dump |     64K |                  |         |
  %
  % 3 mountable partitions found. (+) - mountable partition
  esp32#(/)>

Плюсики в колонке "M?" означают, что фаловую систему, в принципе, можно смонтировать.

Для монирования используем всю ту же самую команду "mount":

  esp32#(/)>mount wwwroot
  %  FAT/exFAT  on partition "wwwroot" is mounted under "/wwwroot"
  esp32#(/)>

Или, используя сокращенную форму записи:

  esp32#(/)>m l
  %   LittleFS  on partition "logs" is mounted under "/logs"
  esp32#(/)>

По умолчанию, ESPShell монтирует разделы в каталоги, имена которых он определяет сам,
строя их из названия раздела на диске и слеша. Поэтому команда "mount logs" смонитрует
раздел "logs" в каталог "/logs".

Если необходимо изменить точку монтирования по умолчанию, то ее можно указать вторым 
аргументом команды "mount". В примере ниже файловая систем монтируется в каталог с 
названием /my/fs

  esp32#(/)>m p /my/fs/
  %     SPIFFS  on partition "pr0n" is mounted under "/my/fs"
  esp32#(/)>

Введем еще раз команду "mount" без параметров, чтобы посмотреть как теперь выглядит
таблица разделов:

  % Disk partition |M|File system| Size on |    Mounted on    |Capacity |  Free
  %    label       |?|   type    |  flash  |                  |  total  |  space
  % ---------------+-+-----------+---------+------------------+---------+---------
  %             nvs| | NVStorage |     20K |                  |         |
  %         otadata| |  OTA data |      8K |                  |         |
  %         wwwroot|+| FAT/exFAT |    960K |         /wwwroot |    920K |    884K
  %            pr0n|+|    SPIFFS |    480K |           /my/fs |    434K |    434K
  %            logs|+|  LittleFS |    480K |            /logs |    480K |    464K
  %        coredump| | Core dump |     64K |                  |         |
  %
  % 3 mountable partitions found. (+) - mountable partition
  esp32#(/)>

Напртив смонтированных разделов появилась дополнительная информация: точка 
монтирования, общая емкость и размер свободного места.



"umount"
"unmount"
"umount /PATH"
"unmount /PATH"
---------------

Размонтировать фаловую систему можно двумя способами:
командой "unmount" (или "umount", если вы фанат linux) с указанием точки монтирования:

  esp32#(/)>umount /www
  % Unmounted  FAT/exFAT  partition "/wwwroot"
  esp32#(/)>

Или, находясь в каком-либо каталоге файловой системы выполнить команду "unmount"
без параметров. В этом случае оболочка сама попытается определить точку монтирования:


  esp32#(/wwwroot/index/)>unmount
  % Unmounted  FAT/exFAT  partition "/wwwroot"
  esp32#(/)>



"format [LABEL]"
----------------
Форматирование файловой системы. Если метка раздела не указана, то оболочка будет пытаться 
выяснить, о каком разделе идет речь из текущего рабочего каталога:

  esp32#(/wwwroot/index/)>format
  % Formatting partition "wwwroot", file system type is " FAT/exFAT "
  % done
  esp32#(/wwwroot/)>

После форматирования рабьочий каталог устанавливается в значение точки монтирования. Тип файловой
системы задается в файле partitions.csv и не может быть изменен в рантайме.







"ls [PATH]"
-----------

Листинг каталога. У команды может быть один опциональный параметр - путь до каталога, листинг которого
мы хотим получить. Если параметр не указан, то используется текущий каталог:

  esp32#(/wwwroot/)>ls
  %    Size        Modified          *  Name
  %               -- level up --    DIR [..]
  %       171  1980-01-01 01:43:26  DIR [index]
  %       146  1980-01-01 01:43:26  DIR [logs]
  %         0  1980-01-01 01:43:26  DIR [uphp]
  %         0  1980-01-01 01:43:26  DIR [tmp]
  %        57  1980-01-01 01:46:18      index.html
  %
  % 4 directories, 1 file, 374 bytes
  esp32#(/wwwroot/)>

Размер файлов и каталогов - в байтах, размер каталога включает в себя размер всех объектов, находящихся
в нем. Сортировки имен файлов\каталогов не предусмотрено. Вместо этого имена выводятся в том порядке, в
котором они были созданы.


Пример: посмотреть, что там, внутри "/wwwroot/index/"

  esp32#(/)>ls wwwroot/index
  %    Size        Modified          *  Name
  %               -- level up --    DIR [..]
  %        57  1980-01-01 01:45:00      index.php
  %        57  1980-01-01 01:45:16      index_old.php
  %        57  1980-01-01 01:45:26      index_html
  %
  % 0 directories, 3 files, 171 bytes
  esp32#(/)>




"cd [PATH|..]"
--------------

Смена каталога, стандартная всем известная команда "cd".

Оболочка понимает три различных написания этой команды

  1. "cd" : команда без параметров. Каталог меняется на корневой каталог для данной фаловой системы,
            т.е. меняется на точку монтирования:

            esp32#(/wwwroot/1/2/)>cd
            esp32#(/wwwroot/)>

  2. "cd .." : команда с одним аргументом, двоеточием. Переход в каталог уровнем выше.
      Неприятным моментом является тот факт, что написать, например, "cd ../../" нельзя,
      оболочка не поймет. Вместо этого следует дважды исполнить команду "cd .."

         
  3. "cd PATH" : один аргумент, путь до какого-либо существующего каталога. Значение текущей
                 рабочей директории будет установлено согласно PATH

       esp32#(/wwwroot/)>cd test_dir/dir2
       esp32#(/wwwroot/test_dir/dir2/)>cd
       esp32#(/wwwroot/)>cd ..
       esp32#(/)>
      

"rm PATH [PATH1 PATH2 .. PATHn]"
---------
Удаление файлов и каталогов, без подтверждений.


  esp32#(/)>ls wwwroot/test_dir
  % Size/Used      Modified          *  Name
  %               -- level up --    DIR [..]
  %            1980-01-01 01:00:24  DIR [dir2]
  %         4  1980-01-01 01:16:20      test.cfg
  %
  % 1 directory, 1 file, 4 bytes


  esp32#(/)>rm wwwroot/test_dir
  % Directory removed: "/wwwroot/test_dir/dir2/"
  % File removed: "/wwwroot/test_dir/test.cfg"
  % Directory removed: "/wwwroot/test_dir/"
  % 3 files/directories were deleted
  esp32#(/)>


"write PATH [TEXT]"
-------------------

"append PATH TEXT"
------------------

"mkdir PATH [PATH1 ... PATHn]"
-----------------------------

"touch PATH [PATH1 ... PATHn]"
-----------------------------

"insert PATH LINE_NUM [TEXT]"
-----------------------------

"delete PATH LINE_NUM [COUNT]"
------------------------------


"cat [-n|-b] PATH [LINE_NUM [COUNT]] [uart NUM]"
------------------------------------------------

"mv"
----

"cp"
----



