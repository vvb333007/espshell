ESP32Shell for the Arduino Framework by vvb333007 <vvb@nym.hush.com>

Встроенные команды ESPShell, общие сведения
-------------------------------------------

Список доступных команд может быть получен, если ввести знак вопроса и нажать <Enter>.
Знак вопроса - это тоже команда, которая просто выводит список доступных в данном 
контексте комманд а так же их краткое описание. Выглядит это следующим образом:


esp32#>?
% Enter "command ?" to get details about the command.
% List of available commands:
%
% "?"          : Show the list of available commands
% "uptime"     : System uptime
% "show"       : Display information
% "pin"        : GPIO commands
% "cpu"        : Set/show CPU parameters
% "mem"        : Memory usage
% "reload"     : Reset CPU
% "nap"        : CPU sleep
% "iic"        : I2C commands
% "uart"       : UART commands
% "sequence"   : Pulses/levels sequence configuration
% "tty"        : IO redirect
% "echo"       : Enable/Disable user input echo
% "suspend"    : Suspend sketch execution
% "resume"     : Resume sketch execution
% "tone"       : PWM output
% "count"      : Pulse counter
% "exit"       : Exit

esp32#>

Обратите внимание на тот факт, что все сообщения от espshell начинаются со знака
процента "%", что позволяет отфильтровывать сообщения espshell для упрощения 
программной обработки вывода. (См. так же команду "echo" ниже)

При вводе команд и их аргументов допускаются сокращения: например, вместо того,
чтобы вводить команду "sequence" можно написать "seq" или даже "se". При обработке
ввода, espshell производит поиск по частичному совпадению. Если же сопоставить
однозначно пользовательский ввод и команду не представляется возможным (например,
если просто ввести "r" - это может быть "reload" или "resume"), будет выполнена
команда идущая первой по списку. Таким образом, если просто ввести "r" и нажать
<Enter> произойдет перезагрузка (выполнится команда "reload")

Сокращать можно как команды, так и их аргументы. Ниже приведены две одинаковые
с точки зрения espshell уоманды:

  esp32#> pin 2 out open high
  esp32#> pi 2 ou hi"


Получить более подробное описание команды, ее аргументов и примеры использования
можно, введя имя команды (например, "cpu"), пробел, знак вопроса и нажать <Enter>

  esp32#> cpu ?



ВСТРОЕННЫЕ КОМАНДЫ. ОПИСАНИЕ, ПРИМЕРЫ
-------------------------------------

"exit"     - Выход из подраздела (в подразделы можно попасть командами "uart", "iic", 
             "sequence", "camera"). Выполненная в корневом разделе, не делает ничего,
             за исключением особого случая: команда "exit exit" закрывает espshell и 
             удаляет соответствующую задачу. Память, занятая в процессе работы шелла
             не освобождается, конфигурация пинов и интерфейсов не восстанавливается

"uptime"   - Показывает, сколько примерно времени прошло с момента последней загрузки.
             использует внутренний микросекундный таймер ESP32

"show seq" - Показывает sequence (последовательность сигналов low/high), которую
             создали с помощью команды "sequence". Эта команда относится к генерации
             сигналов (испульсов),про которые подробно написано в файле 
             "docsru_RU//Pulse_Generator.txt"

"pin"      - Одна из основных и часто используемых команд. Смотреть состояние пина, 
             читать или устанавливать значения, создавать простенькие последовательности 
             сигналов и и.п. В подробностях команда описана в файле
             "docs/ru_RU/Pin_commands.txt"
             
"cpu"      - Команда без параметров выводин информацию о частотах (процессора, кристалла
             и переферии) и температуре процессора.
           - Команда, введеная с одним параметром - числом, устанавливает частоту 
             центрального процессора. Частота задается в мегагерцах. Если заданная
             пользователем частота не поддерживается, будет выведен список поддерживаемых
             частот:

               esp32#>cpu 99
               % Supported frequencies are: 240, 160, 120, 80, 40, 20 and 10

"mem"      - Информация о занятой\свободой памяти. Для процессоров со SPIRAM (PSRAM)
             так же отображается информация, но в килобайтах.

               esp32#>mem
               % Chip memory total: 369360, free: 313644
               % External SPI RAM total:0KB, free: 0KB

"reload"   - Перезагрузка

"nap"      - Команда, введеная без параметров, переводит процессор в режим сна,
             (light sleep). В качестве пробуждения ожидается активность на uart
             (тот, на котором запущен espshell) - при получении 3 битов "1" 
             процессор просыпается. Например, можно нажать(послать) "пробел"
             два раза.
           - Команда с параметром (числом) переводит процессор в режим light 
             sleep, в каяестве пробуждения установлен таймер - аргумент команды,
             время сна в секундах. Пробуждение по UART при этом невозможно.

"iic"      - Шина I2C. Введя, например,"iic 1" попадаем в подраздел с коммандами
             относящимеся к интерфейсу i2c1. Все команды, относящиеся к i2c 
             находятся этом подразделе. Чтобы выйти из него, нужно ввести "exit"
             Работа с i2c подробно описана в "docs/ru_RU/I2C_Commands.txt"

"uart"     - Интерфейс UART. Так же, как и в вышеприведенной команде "iic", задается
             один параметр - номер интерфейса, с которым мы хотим работать, и который
             будем конфигурировать. Введя, например,"uart 1" попадаем в подраздел с 
             коммандами относящимеся к первому UART. Все команды, относящиеся к uart 
             находятся этом подразделе. Чтобы выйти из него, нужно ввести "exit"
             Работа с UART подробно описана в "docs/ru_RU/UART_Commands.txt"
             Используйте команду "uart 0" с осторожностью, а то espshell отвалится :)


"sequence" - Конструирование всяких разных последовательностей (сигнала), для 
             последующей их отправки через какой-либо пин. Последовательности могут
             быть разного толка - от мигания светодиодом, до сигналов IR remote.
             В подробностях описана в "docs/ru_RU/Pulse_Generator.txt"

"tty"      - Использовать другой UART для ввода\вывода.


"echo off" - Аналог команды AT модема "ATE0". Выключает вывод сообщений от espshell
             (но не вывод комманд!). В частности, пропадает строка приглашения, ввод
             пользователя не посылается назад. Команда предназначена для упрощения
             автоматизации управления через espshell

"echo on"  - Режим по умолчанию.

"suspend"  - Приостановить выполнение скетча (а именно - Arduino loop()). Задачи, 
             запущенные из функции loop() не приостанавливаются.

"resume"   - Продолжить выполнение скетча, приостановленного командой "suspend"

"tone"     - Генератор прямоугольных импульсов заданной частоты и скважности. Частота
             задается в герцах, а скважность - число с плавающей точкой, от 0 до 1.
             Команда включает генератор на заданном пине, генерация происходит
             в фоне. Подробнее описано в "docs/ru_RU/Tone_Generator_And_Pulse_Counter.txt"

"count"    - Счетчикк импульсов. Позволяет посчитать количество пришедших импульсов на
             данном пине в течении указанного времени. 
             Подробнее описано в "docs/ru_RU/Tone_Generator_And_Pulse_Counter.txt"
