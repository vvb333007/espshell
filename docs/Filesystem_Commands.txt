ESP32 Filesystems
-----------------

As of 2024 there are three filesystem which are commonly used on ESP32 in IDF 
and Arduino projects: these are LittleFS, FAT and SPIFFS  (the latter being 
deprecated soon). All three filesystems are supported by ESPShell in its tiny 
file manager

There is sample "partitions.csv" file which defines all three filesystems, 
for testing purposes. This file being placed in the sketch directory will be 
used when firmware upload starts


ESPShell File Manager purpose
-----------------------------

Main purpose is to copy/move/rename/delete files which may be used by sketch: 
examples are configuration files, images from camera, web server pages, logs 
and so on. ESPShell allows for copy/move operations across different file 
systems: one can copy or move file from FAT to LittleFS for example 

Additionaly ESPShell allows for very basic binary/text file editing: user can 
create files, append strings/bytes to files, insert or remove lines in text 
files

Commands
--------

IMPORTANT:

If you want spaces (" ") in your path then use asterikas "*" instead of 
spaces: ESPShell converts asteriks to spaces in paths and file names.

ESPShell does not support: 

  1. file name completion, 
  2. path wildcards (? . * etc symbols)


To enter file manager mode one should type "files" and press <Enter>:


  esp32#>files
  % Entering filesystem configuration mode. Ctrl+Z or "exit" to return
  % Main commands are still avaiable (but not visible in "?" command list)
  esp32#(/)>

Now you can see the /current working directory/ displayed in the prompt, in 
brackets. This called a root directory. Root directory is virtual and can not 
be used in the way other directories used. It is impossible to create files or 
directories in root directory. It is used exclusively to hold /mountpoints/.

Mount point is a directory, which name starts with "/", for example "/wwwroot", 
where actual filesystem is deployed.

Lets take look at file manager commands (you can exit file manager mode by 
pressing Ctrl+Z or typing "exit" and pressing <Enter>):


  esp32#(/)>?
  % Enter "? command" to get details about specific command.
  % Enter "? keys" to display the espshell keyboard help page
  %
  % "?"          : Commands list & help
  % "mount"      : Mount partition/Show partition table
  % "unmount"    : Unmount partition
  % "ls"         : List directory
  % "pwd"        : Working directory
  % "cd"         : Change directory
  % "rm"         : Delete files
  % "mv"         : Move/Rename files
  % "cp"         : Copy files
  % "write"      : Write bytes
  % "append"     : Append bytes
  % "insert"     : Insert bytes
  % "delete"     : Delete lines
  % "mkdir"      : Create directory
  % "cat"        : Display text/binary file
  % "touch"      : Touch/Create file
  % "format"     : Erase old & create new filesystem
  % "exit"       : Exit
  esp32#(/)>


"mount" : Show partition table & mounted filesystems
-----------------------------------------------------

Command without arguments displays partition table and some information about
mounted filesystems (command "mount" was shortened to "m"):

  esp32#(/)>m
  %  Partition label |   Type    |   Size  |    Mounted on    |Total(Kb)|Free(Kb)
  % -----------------+-----------+---------+------------------+---------+--------
  %              nvs | NVStorage |    20Kb |                  |         |
  %          otadata |  OTA data |     8Kb |                  |         |
  %          wwwroot | FAT/exFAT |   960Kb |          /wwwroot|     920 |    920
  %             pr0n |    SPIFFS |   480Kb |                  |         |
  %             logs |  LittleFS |   480Kb |             /logs|     480 |    464
  %         coredump | Core dump |    64Kb |                  |         |
  %
  % 3 mountable partitions found
  esp32#(/)>

The output above says that we have 3 different partitions, two of which are 
mounted under "/wwwroot" and "logs". The "Size" column shows raw filesystem 
size as it is on a flash chip. "Total" and "Free" columns show total and 
available size within filesystems.


"mount LABEL [/PATH]" : Mount partition
---------------------------------------

Same command but with 1 or 2 arguments: mount filesystems located on flash partition
LABEL under path /PATH. If /PATH (a mountpoint) is not specified then it is 
constructed from "/" and partition label (just as on screenshot above)

If filesystem being mounted fails to mount it is formatted an tried again.

LABEL can be shortened, but it does not affect mountpoint being generated: it will 
be full label name:

  esp32#(/)>mount www
  %  FAT/exFAT  on partition "wwwroot" is mounted under "/wwwroot"
  esp32#(/)>

Here we used short label name ("www" instead of "wwwroot") but it was treated as if it 
was full name. The mountpoint was omitted and autogenerated from partition label name 
and "/"

Once mounted the filesystem is accessible under /PATH ("/wwwroot" in this case): user 
can "cd /wwwroot" and explore/modify the filesystem

Example: mount filesystem on partition "wwwroot" under mountpoint "/my/point"

  esp32#(/)>mount wwwroot /my/point
  %  FAT/exFAT  on partition "wwwroot" is mounted under "/my/point"
  esp32#(/)>


"unmount [PATH]" : Unmount partition previously mounted with "mount"
--------------------------------------------------------------------

Opposite of "mount" : unregister filesystems. Takes one optional argument: the mountpoint
path. If mountpoint is not specified then it is derived from the current working directory:


  esp32#(/wwwroot/1/2/)>unmount
  % Unmounted  FAT/exFAT  partition "/wwwroot"
  esp32#(/)>

There is also command "umount" which is simply alias of "unmount"


"format [LABEL]" : Format filesystem
------------------------------------
Format the partition LABEL. If LABEL is omitted then espshell derives partition
label from current working directory:

  esp32#(/wwwroot/)>format
  % Formatting partition "wwwroot", file system type is " FAT/exFAT "
  % done
  esp32#(/wwwroot/)>

The filesystem type is defined by partitions.csv file and can not be changed in runtime.
For FAT filesystem quick format is performed (no data is erased, only file allocaton 
tables are purged)



"ls [PATH]" :  Directory listing
--------------------------------

Displays directory listing. If PATH is omitted then current working directory is used:

  esp32#(/wwwroot/)>ls
  %    Size        Modified          *  Name
  %               -- level up --    DIR [..]
  %       171  1980-01-01 01:43:26  DIR [index]
  %       146  1980-01-01 01:43:26  DIR [logs]
  %         0  1980-01-01 01:43:26  DIR [uphp]
  %         0  1980-01-01 01:43:26  DIR [tmp]
  %        57  1980-01-01 01:46:18      index.html
  %
  % 4 directories, 1 file, 374 bytes
  esp32#(/wwwroot/)>

Displayed information: file/directory last modification time, file size in bytes, entry 
type (directories marked as DIR, files have no makrkings) and file/directory name.

Additionaly, directory names are displayed in square brackets, plus ".." directory is 
displayed as well. There is no any sorting applied to directory listing so files and
directories appear ordered by creation time

Example: display directory /wwwroot/index/ content:

  esp32#(/)>ls wwwroot/index
  %    Size        Modified          *  Name
  %               -- level up --    DIR [..]
  %        57  1980-01-01 01:45:00      index.php
  %        57  1980-01-01 01:45:16      index_old.php
  %        57  1980-01-01 01:45:26      index_html
  %
  % 0 directories, 3 files, 171 bytes
  esp32#(/)>

The PATH argument must be directory path, with or without trailing "/"


"cd [PATH|..]" : Change directory
----------------------------------

There are 3 "cd" commands:

  1. "cd" : command without parameters changes current working directory (CWD) to
     mountpoint directory, i.e. to the root directory of given filesystem (not to be
     mistaken for root directory "/" which is root for all fylesystems):


        esp32#(/wwwroot/1/2/)>cd
        esp32#(/wwwroot/)>

  2. "cd .." : change working directory to to the parent directory. One directory 
     per command: paths like "../../" are not supported. If parent directory does 
     not exist (happens with complex mountpoints like "/my/mount/point/" where "/my"
     and "/point" do not exist as real directories) then "cd .." is repeated until 
     a valid directory reached:

       esp32#(/)>mount wwwroot /a/mount/point
       %  FAT/exFAT  on partition "wwwroot" is mounted under "/a/mount/point"
       esp32#(/)>cd /a/mount/point
       esp32#(/a/mount/point/)>cd ..
       esp32#(/)>

     Example above mounts FAT partition named "wwwroot" to a complex mountpoint 
     "/a/mount/point".  Changing directory to this mountpoint and doing "cd .." 
     will not bring you to "/a/mount" : this directory does not exist, the mount
     point path is a monolithic thing, it is not one directory nested into others. 
     Thats why "cd .." in this case brough us to "/" instead

  3. "cd PATH" : change current working directory to PATH just as Linux or Windows 
     shell does, no much to explain. PATH can be absolute (must include mountpoint)
     or relative (and then CWD is prepended to the path)

       esp32#(/wwwroot/)>cd test_dir/dir2       # change dir (relative path)
       esp32#(/wwwroot/test_dir/dir2/)>cd       # back to filesystem root
       esp32#(/wwwroot/)>cd ..                  # and 1 more level up 
       esp32#(/)>
      

"rm PATH" : Delete files/directories
------------------------------------

If PATH if file then the file is deleted. If PATH is a directory then the directory
and all its content is removed, with no confirmation:


  esp32#(/)>ls wwwroot/test_dir
  % Size/Used      Modified          *  Name
  %               -- level up --    DIR [..]
  %            1980-01-01 01:00:24  DIR [dir2]
  %         4  1980-01-01 01:16:20      test.cfg
  %
  % 1 directory, 1 file, 4 bytes


  esp32#(/)>rm wwwroot/test_dir
  % Directory removed: "/wwwroot/test_dir/dir2/"
  % File removed: "/wwwroot/test_dir/test.cfg"
  % Directory removed: "/wwwroot/test_dir/"
  % 3 files/directories were deleted
  esp32#(/)>

  Entries in root directory ("/") can not be deleted with this command: use "unmount" 
  command instead

"write PATH [TEXT]" : Write bytes
---------------------------------
Write arbitrary bytes/characters string to the file. If file does not exist it is 
created. If writing is performed in existing file then all its content is lost with 
each new "write". (To selectively modify text files check commands "append","insert"
and "delete"). The TEXT argument is text which can include spaces, escape sequences 
\n, \r, \t, \AB where AB is a hexadecimal character code.

If TEXT is omitted, then single "\n" byte is written (newline symbol)


  Example 1: Create new file "test.cfg" (or rewrite existing) with line "Hello World!", 
             and the next line consisting of bytes 61 62 63 64 65 \n:

  esp32#(/wwwroot/)>write test.cfg Hello World\n\61\62\63\64\65\n
  % 18 bytes written
  esp32#(/wwwroot/)>

"append PATH TEXT" : Append bytes
-----------------------
This is a twin brother of "write" command which appends data to the file instead of 
rewriting it


"mkdir PATH1 PATH2 ... PATHn" : Create directory/ies
----------------------------------------------------

Creates a directory. Nested path creation is not supported: dont expect that "mkdir 1/2/3/4"
will create 4 directories for you. Instead it should be something like 

  esp32#(/wwwroot/)>mkdir 1
  esp32#(/wwwroot/)>mkdir 1/2
  esp32#(/wwwroot/)>mkdir 1/2/3
  esp32#(/wwwroot/)>mkdir 1/2/3/4
  esp32#(/wwwroot/)>

Example 1: create directories /wwwroot/1, /wwwroot/2 and /wwwroot/3:

  esp32#(/)>cd wwwroot
  esp32#(/wwwroot/)>mkdir 1 2 3

This command can not create directories in root ("/") directory: use "mount" command
instead.

NOTE: if you want spaces (" ") in your path then use asterikas "*" instead of spaces:
ESPShell converts asteriks to spaces in paths and file names


"touch PATH1 PATH2 ... PATHn" : Create new or update timestamps on existing file(s)
-----------------------------------------------------------------------------------
As it Linux counterpart, this command creates new files or updates timestamps on existing files


"insert PATH LINE_NUM [TEXT]" : Insert bytes into text file
---------------------------------------------------------
Insert TEXT (possibly consisting of many lines separated by "\n") before line LINE_NUM in file
PATH. Please note that final "\n" added to the TEXT automatically: you don't need to end every 
string enetered with "\n". Use line separator only to separate one string from another for 
multiline input:

  esp32#(/wwwroot/)>cat -n index.html
     1: <html>
     2: <head></head>
     3: <body>
     4: Hello World!
     5: </body>
     6: </html>
     7:
  esp32#(/wwwroot/)>insert index.html 4 Hey! This line was inserted!\nAnd this line also!
  %% Line inserted
  esp32#(/wwwroot/)>cat -n index.html
     1: <html>
     2: <head></head>
     3: <body>
     4: Hey! This line was inserted!
     5: And this line also!
     6: Hello World!
     7: </body>
     8: </html>
     9:
  esp32#(/wwwroot/)>

TEXT can contain special symbols (escape sequences, raw bytes) just as in  
"write" command. If TEXT is omitted completely then a single byte is inserted: 
a newline symbol (i.e. empty string)


"delete PATH LINE_NUM [COUNT]" : Delete lines in text file
----------------------------------------------------------
Deletes COUNT lines starting from line LINE_NUM in file PATH.
If COUNT is omitted, then value of 1 is used as COUNT


"cat [-n|-b] PATH [LINE_NUM [COUNT]] [uart NUM]" : Display/transmit text/binary file
------------------------------------------------------------------------------------
Unlike its Linux counterpart the ESPSHell's "cat" command does not support processing of
multiple files so it can not be used to join files.  

  esp32#(/wwwroot/)>cat index.html
  <html>
  <head></head>
  <body>
  Hey! This line was inserted!
  And this line also!
  Hello World!
  </body>
  </html>

  esp32#(/wwwroot/)>

By default whole file is displayed but with LINE_NUM and COUNT arguments one can set the
output range: LINE_NUM is the starting line to display (default value is 1) and the COUNT
is the number of lines to display (default: all lines):

  esp32#(/wwwroot/)>cat -n index.html 4 2
     4: Hey! This line was inserted!
     5: And this line also!
  esp32#(/wwwroot/)>

To display line numbers "-n" option is used: it is useful for finding a line number for 
command "insert" and "delete":

  esp32#(/wwwroot/)>cat -n index.html
     1: <html>
     2: <head></head>
     3: <body>
     4: Hey! This line was inserted!
     5: And this line also!
     6: Hello World!
     7:
     8:
     9: </body>
    10: </html>
    11:
    12:
  esp32#(/wwwroot/)>


In contrast option "-b" treat file as it is binary (non-text) file: 

  esp32#(/wwwroot/)>cat -b index.html
         0  1  2  3   4  5  6  7   8  9  A  B   C  D  E  F  |0123456789ABCDEF
  ----------------------------------------------------------+----------------
  0000: 3c 68 74 6d  6c 3e 0a 3c  68 65 61 64  3e 3c 2f 68  |<html>.<head></h
  0010: 65 61 64 3e  0a 3c 62 6f  64 79 3e 0a  48 65 79 21  |ead>.<body>.Hey!
  0020: 20 54 68 69  73 20 6c 69  6e 65 20 77  61 73 20 69  | This line was i
  0030: 6e 73 65 72  74 65 64 21  0a 41 6e 64  20 74 68 69  |nserted!.And thi
  0040: 73 20 6c 69  6e 65 20 61  6c 73 6f 21  0a 48 65 6c  |s line also!.Hel
  0050: 6c 6f 20 57  6f 72 6c 64  21 0a 0a 0a  3c 2f 62 6f  |lo World!...</bo
  0060: 64 79 3e 0a  3c 2f 68 74  6d 6c 3e 0a  0a          |dy>.</html>..
  % EOF (109 bytes)
  esp32#(/wwwroot/)>


Command "cat" is able to send file content over arbitrary uart providing
that uart is initialized. When option "-b" is used then RAW file content is
sent over UART, not the fancy table above. This command is used to transmit 
files to devices connected to uart: one of such example is a internal filesystem
of SIM7600 LTE module, which has 64G internal disk which can be used to send large
files over LTE without any CPU use: SIMCOM does it itself

"mv" : Move/rename files or directories
---------------------------------------
Not yet implemented


"cp" : Copy files or directories
--------------------------------
Not yet implemented


