ESP32Shell for the Arduino Framework by vvb333007 <vvb@nym.hush.com>



KEYS USED IN ESPSHELL FOR COMMAND LINE EDITING:
-----------------------------------------------

<ENTER>        : Execute command

<- -> /\  \/   : Arrows: move cursor left or right. Up and down arrows scroll 
                 through command history.

<DEL>          : As in Notepad

<BACKSPACE>    : As in Notepad

<HOME>, <END>  : Do not work! Use Ctrl+A instead of <HOME> and Ctrl+E as <END>

<TAB>          : Quick jump from one word in the line to another. Fast switching
                 between command arguments. Continously press to cycle through
                 all arguments/words in line

Ctrl+R         : History search. Press Ctrl+R and start typing. Press <ENTER> 
                 to search for command executed before

Ctrl+K         : Clear the line from cursor to the end

Ctrl+L         : Clear the screen, keep user input

Ctrl+Z         : Same as entering "exit" and pressing <ENTER>

Ctrl+C         : Suspend sketch execution. Resume with "resume" command


Please note that above list can be obtained by shell command "? keys". Also
note that Ctrl+... sequences work on terminal software (TeraTerm, PuTTY, cu)
but do not work in ArduinoIDE Serial Monitor as it lacks the ability to send
Ctrl+... key sequences.

By entering "? keys" command one also can find the key combinations which
can be used on "dumb" terminals: if for example arrow keys in your terminal
are not working correctly you can use Ctrl+F or B as an alternative keys.


AUTOCOMPLETION
--------------

ESPShell won't autocomplete commands for you on pressing <TAB>: instead ESPShell
simply accepts non-completed input. In linux shell one types "upt" and presses
<TAB> to let the shell autocomplete the command to "uptime". In contrast in ESPShell
one can simply type "upt" (or even "up") and press <Enter>. ESPShell does not require
anyone to type command "sequence": "seq" is more than enough.

Same about command arguments - any command or command argument can be shortened


ESPSHELL COMMANDS AND THEIR DESCRIPTION
---------------------------------------

List of commands can be obtained at any time by typing "?" and pressing <Enter>
Commands can be entered in shortened form: "seq" or even "se" instead of 
"sequence" or "rel" instead of "reload". ESPShell's parser does a partial match
of the command name to user input allowing for shortening command names


Same applies to command arguments:
  For example, instead of entering "pin 2 out open high" one can type something
  like "pi 2 ou h" to get the same result. If there is ambiguity happens then
  parser just chooses first match:

  "pi 2 o h" will expand to "pin 2 open high" not "pin 2 out high" because "open"
  is the first in the list for partial match, not "out". Make sure that you use
  "short" but not very short commands and arguments

List of all supported command can be obtained by typing "?" and pressing <Enter>

Help on a specific command can be obtained by typing "?" a space, command name 
and pressing <Enter>: "? command_name"

Here is the list of currently supported commands (main command tree):

% "?"        : Show the list of available commands
% "uptime"   : System uptime
% "show"     : Display information
% "pin"      : GPIO commands
% "cpu"      : Set/show CPU parameters
% "mem"      : Memory usage
% "reload"   : Reset CPU
% "nap"      : CPU sleep
% "iic"      : I2C commands
% "uart"     : UART commands
% "sequence" : Pulses/levels sequence configuration
% "tty"      : IO redirect
% "echo"     : Disable/enable user input echo
% "suspend"  : Suspend sketch execution
% "resume"   : Resume sketch execution
% "pwm"      : PWM output
% "count"    : Pulse counter
% "var"      : Sketch variables
% "exit"     : Exit



"exit"     - Executed in a command subdirectory exits from that subdirectory; 
             executed in main command tree does nothing unless  it has 1 
             parameter, an optional keyword "exit": if this the case then 
             espshell exits and removes its task. Resources associated with 
             espshell are not freed.

           - Hint: Ctrl+Z is a key which enters command "exit" and presses <Enter>
                   for you.


"uptime"   - Shows how much time has passed since last boot

"show seq" - Shows information about signal patterns see documentation file
             "docs/Pulse_Generator.txt" for more  information on sequences and
             their use

"pin"      - Various pin commands.Command takes multiple arguments of which
             1st argument is always pin number. More information and examples
             on this command can be found in documentation file
             "docs/Pin_Commands.txt"

"cpu"      - 1. Shows CPUID, CPU frequency, xtal frequency and bus frequency. 
                Displays CPU core temperature, Arduino Core version along with
                ESP-IDF version used as well as ARDUINO_BOARD and ARDUINO_VARIANT:

                   esp32#>cpu

                   % CPU ID: ESP32-D0WD-V3, Rev.: 1.45
                   % CPU frequency is 240Mhz, Xtal 40Mhz, APB bus 80Mhz
                   % Chip temperature: 37.8 C
                   %
                   % Sketch is running on ESP32_DEV/esp32,uses Arduino Core v3.0.5, based on
                   % Espressif ESP-IDF version "v5.1.4-828-g33fbade6b8-dirty"
                   % Last boot was 1 minutes 35 seconds ago
                   % Restart reason was "reload command"
                   esp32#>


           - 2. Set CPU frequency to X MHz. List of supported frequencies is 
                displayed on attempt to set unsupported frequency:
            
                   esp32#>cpu 99
                   % Supported frequencies are: 240, 160, 120, 80, 40, 20 and 10

"mem"      - Display memory usage info: total/free memory both on heap and
           - in PSRAM (SPIRAM) if available:

               esp32#>mem
               % -- Memory information --
               % malloc():
               % 308496 bytes total, 266924 available, 110580 max per allocation
               % heap_caps_malloc():
               % 369772 bytes total,  327348 available, 110580 max per allocation
               esp32#>

               NOTE: memory available to classic mallo is different from 
               heap_caps_malloc(MALLOC_CAPS_INTERNAL). Real size depend on what 
               memory allocation function you use. malloc() internally calls
               heap_caps_malloc(MALLOC_CAPS_DEFAULT). PSRAM allocation is only
               available to heap_caps_malloc() allocater but not for malloc()
               

"reload"   - Reboots ESP32
	     Hint: command "cpu" and "uptime" shows the last reboot cause: was
                   it caused by watchdog timer interrupt, or system crash etc

"nap"      - Put CPU into light sleep. CPU wakes up by UART activity (press any
             key to wake up). Wake up condition is 3 positive edges on UART0 
             which is almost any key (spacebar requires 2 presses).
                                  OR
             Puts CPU into light sleep for X seconds, CPU wakes up by timer.
             Type "? nap" do get more information on this command

"iic"      - I2C bus/interface access. Configure and use (read/write/scan) a
             specified I2C bus (there are number of them available).
             Detailed descriptin of I2C commands is in "docs/I2C_Commands.txt"

           - IMPORTANT: you don't need to "exit" from a command subdirectory
             if you want to execute command from the main tree: just enter the
             command while in a subdirectory. ESPShell will search main command
             tree if subdirectory has no matching command

"uart"     - UART X interface access. Configure and use (read/write/bridge) UART
             interface. Read "docs/UART_Commands.txt" for details on how to
             setup and use UART interfaces

           - IMPORTANT: you don't need to "exit" from a command subdirectory
             if you want to execute command from the main tree: just enter the
             command while in a subdirectory. ESPShell will search main command
             tree if subdirectory has no matching command


"sequence" - Signal generator commands. Allow for custom signal patterns with 
             precise timings to be generated on any pin. See documentation file
             "docs/Pulse_Generator.txt" for more info. Simple patterns can also
             be generated by means of "pin" command (see "docs/Pin_Commands.txt")

           - IMPORTANT: you don't need to "exit" from a command subdirectory
             if you want to execute command from the main tree: just enter the
             command while in a subdirectory. ESPShell will search main command
             tree if subdirectory has no matching command


"tty"      - Use specified UART for espshell input / output. Used to run the 
             shell on uarts other than default leaving UART0 purely for sketch.


"echo off" - Disables ESPShell from printing out its prompt and disables user
             input echo. This mode is used for automated processing when UART
             output is going to be parsed by some software. Equivalent of common
             "ATE0" command for modems. When echo is disabled. user still can
             use line editing/history scrolling but it is just not displayed.

"echo on"  - Default is to echo user input & display espshell prompt

"echo silent" - Completely disable ALL espshell output to the terminal. No error
                messages will be displayed. Commands being executed will not
                display anything.

"suspend"  - Pause Arduino's loop(). Tasks that were started by the loop()
             task are not suspended by this command

           - Hint: Pressing Ctrl+C does the same thing if done in terminal

"resume"   - Resume execution of Arduino's loop() previously paused with
             "suspend" command

"pwm"      - Squarewave generator: generates signal of specified frequency and 
             duty on pin X. See Tone_Generator_And_Counter.txt for details, but
             in short, to start a PWM on pin 2, frequency 312kHz and duty cycle
             of 5% one can enter "pwm 2 312000 0.05" and press <Enter>

"count"    - Pulse counter: counts pulses arrived on pin. Details on the
             counter and squarewave generator can be found in documentation
             file "docs/Tone_Generator_And_Counter.txt", but in short it
             is "count 10" to count pulses for 1000ms on pin 10. Type 
             "count 10 100" to count pulses for 100ms or "count 10 100 neg"
             if you want to count negative edges (default behaviour is to count
             positive edges)

"var"        Display/Set user sketch variables. Variables must be registered, by
             calling convar_add(VariableName) from the main sketch. You also will
             need "extra/espshell.h" where convar_add() macro is declared.
             
             "var" with no arguments displays the list of registered sketch variables:

               esp32#>var
               % Registered variables:
               % "Short", 2 bytes long
               % "Char", 1 bytes long
               % "test", 4 bytes long
               esp32#>
             
             The output above says we have 3 variables registered, all of different length.

             "var NAME" will display a variable value:

               esp32#>var Short
               % "Short" == Unsigned: 65535, or Signed: -1 (hex: ffff)
               esp32#>
             

             When variable is displayed it is displayed in a number of formats: as if it was
             signed, unsigned or floating point value. Floating point conversion is attempted
             only on 4-byte long variables

