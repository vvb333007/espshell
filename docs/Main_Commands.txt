ESP32Shell for the Arduino Framework by vvb333007 <vvb@nym.hush.com>


WHAT IS THIS:
-------------
 This is a debugging/development tool **(a library for Arduino framework)** for use 
 with Arduino projects on ESP32 hardware. 

 Provides a command line interface (CLI) on serial port running in parallel to your 
 Arduino sketch. It is not standalone program - this tool attaches to the user sketch 
 (at compile time) and enchances any sketch (even empty one) with a shell.

 User can enter and execute commands (there are many built-in commands) in a way 
 similar to Linux shell while their sketch is running. There are commands to control
 sketch execution (to some extent) : commands to suspend or resume sketch execution.
 One can simply press Ctrl+C to suspend sketch while shell will continue to work. 

 ESPShell can be used either from Arduino IDE Serial Monitor or any other communication 
 software like PuTTY, TeraTerm, Linux "cu" utility and many others. Developer of this 
 library uses TeraTerm on Windows 10. Default settings for both Arduino IDE Serial 
 Monitor and TeraTerm are shown on screenshots: "docs/TeraTerm_Default_Settings.jpg"
 and "docs/Arduino_IDE_Serial_Monitor_Default_Settings.jpg".


 This library can be useful for developers who are interfacing new I2C or UART devices
 as espshell has commands to create/delete hardware interfaces, send/receive
 data. Interfacing GPS (uart-based) chips or GSM modems, making libraries for
 I2C devices. 

 Developers, who do home automation: shell has commands to do whatever one wants with 
 GPIO (check out "docs/Pin_Commands.txt"), so interfacing relays now don't even require 
 you to write any code. There are PWM generator and a frequency meter, a pulse counter 
 and a pulse pattern generator are available on any GPIO.
 
 
HOW TO ADD IT TO YOUR ARDUINO PROJECT/SKETCH:
---------------------------------------------

 This library does not require to call any functions to start the shell except one line of 
 code: adding "#include "espshell.h" somewhere in the beginning of your sketch.

 Compile and upload your sketch as usual. ESPShell starts automatically when your sketch 
 starts, by intercepting execution control and starting its own task. When ESPShell starts 
 it displays a Welcome banner and is ready to accept commands:


  %
  % ESPShell 0.99.8
  % Type "?" and press <Enter> for help
  % Press <Ctrl+L> to clear the screen, enable colors and show "tip of the day"
  esp32#>
 

 User can interact with ESPShell using either Arduino IDE's Serial Monitor but, for a better 
 experience, a proper terminal software (e.g. TeraTerm) is recommended.

 Note: ESPShell waits for Serial to become initialized; if Serial is not initialized by user
 sketch (i.e. Serial.begin() was never called) then ESPShell will be inactive, sleeping, 
 waiting for the Serial to start.


HOW TO USE THE SHELL
--------------------

  Shell and  user interact through the Serial interface (usually UART0, sometimes USB-CDC):
  shell displays its prompt (e.g. "esp32#>") and wait for user input.

  User (you) can enter and execute various commands; type your command and its arguments,
  edit the command line if necessary and press <ENTER> to execute your command.

  ESPShell parses user input and performs requested actions, display errors if there 
  were any, displays fresh prompt and the cycle repeats
 

  
  Keyboard use & key bindings
  ---------------------------

  Although works with any Serial Monitor, the ESPShell works best when dedicated terminal 
  software is used. Arduino Serial Monitor is not a terminal programand that fact prevents 
  some features of ESPShell to be used: syntax coloring, hotkeys, UART bridge and others.

  Simple terminal programs like Arduino Serial Monitor can not send Ctrl+C and Ctrl+Z sequences
  which are essential in GSM/LTE modems. 


  These keys are recognized by ESPShell:


  Key            | Meaning / Action performed
  ---------------+---------------------------------------------------------------
  <ENTER>        | Execute commands, interrupt running commands
                 |
  <ARROWS>       | Arrows: move cursor left or right. Up and down arrows scroll 
                 | through the command history.
                 |
  <DEL>          | As in Notepad
                 |
  <BACKSPACE>    | As in Notepad
                 |
<HOME> and <END> | These two do not work. Instead use Ctrl+A as <HOME> and Ctrl+E
                 | as <END>.
                 |
  <TAB>          | Quick jump from one word in the line to another. Fast switching
                 | between command arguments: continously press to cycle through
                 | all arguments/words in the command line
                 |
  Ctrl+R         | History search. Press Ctrl+R and start typing. Press <ENTER> 
                 | to search for command executed before
                 |
  Ctrl+K         | Clear the line from cursor to the end
                 |
  Ctrl+L         | Clear the screen, keep user input, enable colors and show a hint
                 |
  Ctrl+Z         | Same as entering "exit" and pressing <ENTER> : moves up one level
                 | in command hierarchy. There are main commands and commands that 
                 | are arranged as subdirectories. 
                 |
  Ctrl+C         | Suspend sketch execution. Resume with "resume" command.
                 |
  <ESC>56<ESC>   | Entering an arbitrary ASCII character: Press <ESC>, then enter 1, 2 or 3 digit 
                 | decimal ASCII code and pressing <ESC> again.
                 | Example: Send a break (Ctrl+C, ascii code 3) : <ESC>3<ESC>
                 |
<ESC><BACKSPACE> | While <BACKSPACE> simply erases 1 character, pressing <ESC> and then <BACKSPACE>
                 | will erase 1 word



 Please note that help page on key combinations can be obtained by executing 
 shell command "? keys".

 By entering "? keys" command one also can find key combinations which can be 
 used on "dumb" terminals: if (for example) arrows keys in your terminal
 are not working correctly then you can use Ctrl+F and Ctrl+B as an alternative:
 Ctrl+F moves cursor [F]orward (-->), Ctrl+B moves it backwards (<--)


 Keys should be more or less intuitive for Linux shell users.


AUTOCOMPLETION vs SHORTENING
----------------------------

 ESPShell won't autocomplete commands for you on pressing <TAB>: instead ESPShell
 simply accepts non-completed input, i.e. commands and command arguments can be 
 /shortened/, lets look at the difference:

 In Linux shell one types "upt" and presses <TAB> to let the shell autocomplete
 the command to "uptime". 

 In contrast in ESPShell one can simply type "upt" (or even "up") and press 
 <Enter>. ESPShell does not require anyone to type command "sequence": "seq" 
 is more than enough.

 Commands such as (for example) "pin 19 out high delay 500 low delay 100"
 can be written as "p 19 o h d 500 l d 500" and it is stll syntaxically correct
 ESPShell command with arguments

 Filename / path autocompletion is not supported yet


BACKGROUND EXECUTION
--------------------

 By default all ESPShell commands are blocking (well, most of them, not all). That
 means that the shell will wait for command execution before starting to accept new 
 input: commands executed in sequence, one by one. 

 Sometimes however we would like to run a number of commands in parallel: lets say 
 we want to run multiple "count" commands to measure frequency on number of pins.

 Adding "&" as very last argument to ANY command instructs ESPShell to execute this 
 command in separate task context, in parallel to other processes. This behaviour
 is well known to Linux users, where "&" is used in exactly same way: to run  
 commands in background.

 This option (background execution) is especially useful with commands "pin" and 
 "count" which may take long time to finish. Every running background command 
 allocates around 5000 bytes of stack memory which is freed after execution

 Background commands can be stopped by using command "kill" (see command list 
 below)


BUILT-IN HELP SYSTEM
--------------------


ESPShell tries to be informative and has built-in help system which can do a few
things - provide manual pages for commands and provide details & possible solutions 
when errors and failures happen: attempt to use non existent pin will most likely
result in a message about pin numbers available on given board.


  How to use the help system?
  ---------------------------

  Normally one can read help pages for commands by entering a question mark "?" 
  followed by keyword: either shortened or full. So, to read manual page on command
  "sequence" one can enter "? seq" and press <Enter>; other examples are "? pin",
  "? count" and so on: a question mark and command name will display help pages
  for commands

  If, however, you would like to see help page during command entering (e.g. you 
  forgot what next argument should be) then just press "?" and help page will be 
  displayed. You can try to type "cou" and press "?" to see "count" command help 
  page.

  And yes, a question mark ("?") is a command on its own, and just as every other
  command it has its own manual page: type "? ?" and see what happens

  The "?" is a hotkey and this behaviour might be annoying in cases when you need
  to enter actual symbol "?" and not invoke help system instead. For example, you
  are writing "Hello World?" string into some file: pressing "?" will invoke help
  page and this is not what we want. Well, one of the solutions is to use <ESC>
  to enter an arbitrary ascii code or, disable "?" hotkey processing by executing
  "var bypass_qm 1" command

  Help page syntax
  ----------------

  When typical help page is displayed, one may notice special symbols (along with
  colors) are used to describe command syntax. Command syntax is always at the
  beginning of any help page. To learn this simple syntax lets look at the begginning
  of "count" command help page: (type "? count" and press <Enter>)

    esp32#>? count
    % -- Pulse counter --
    % "count PIN [NUMBER | trigger | filter LENGTH]*"
    %
    % Count pulses on pin PIN for NUMBER milliseconds (default value is 1 second)
    % Optional "trigger" keyword suspends the counter until the first pulse
    % Optional "filter LEN" keyword ignores pulses shorter than LEN nanoseconds
    ...
    ...


  This is the very first lines of a help page "? count". Here we can see a couple
  of special symbols: square brackets "[" and "]", a vertical bar "|", an 
  asterisk "*" and some words typed in UPPERCASE.

  UPPERCASE - A number or some text string. Any user input. Example help page above
              says that command "count" has 3 such parameters: pin number, measurement time and length.
              In  majority of commands an UPPERCASE argument is a number, however some commands
              also may expect text

  lowercase - These are keywords: command name itself, "trigger" and "filter"; keywords can not
              be changed and must be typed as is

  [   ]     - Square brackets are used to denote OPTIONAL parameters. On color terminals these are
              displayed in dark yellow color
              Example above has only 1 mandatory parameter (pin number) while
              rest are optional and can be omitted

    |       - Verical bar: this is simply logic "OR" operation. In sence "this OR that". Example
              above says that we can enter a NUMBER or the "trigger" keyword or the "filter" keyword
              plus LENGTH parameter
              

    *       - Located next to closing bracket indicates, that anything within the brackets can appear
              multiple times (including zero).  For example text "[hello|world|123]*" can be read as 
              (but not limited to):

                  hello
                  hello hello
                  world hello 123 world
                  ...
              and so on

Other symbols used in ESPShell (bot not in example above) are:

  [ 1..10 ]   - Optional argument: a number in range from 1 to 10 inclusive
  ( 1..10 )   - Mandatory argument: a number in range range from 1 to 10 inclusive
              


ESPSHELL BUILT-IN COMMANDS
--------------------------


  Command directories; Main command directory, entering & exiting
  ---------------------------------------------------------------

  ESPShell groups its commands into "command directories": there are main commands 
  and a few other **command groups**.

  If one wants to execute UART-related commands he/she must **enter** the corresponding
  command directory:

    Example: entering UART configuration mode

      esp32#>uart 0 
      esp32-uart0>

 Executing command "uart 0" for example, switches current command directory to UART 
 command directory. Pressing then "Ctrl+Z" or executing "exit" commands changes command
 directory back to Main.

 When inside a command directory, commands from outside are available and can be 
 executed even if they don't show up on command list:

  Example: 

      Entering UART0 command directory:

      esp32#>uart 0
      % You are about to configure the Serial espshell is running on. Be careful
      % Entering UART configuration mode. Ctrl+Z or "exit" to return
      % Hint: Main commands are still avaiable (but not visible in "?" command list)


      List all available commands:

      esp32-uart0>?
      % Enter "? command" to get details about specific command.
      % Enter "? keys" to display the espshell keyboard help page
      %
      % "?"          : Commands list & help
      % "up"         : Initialize uart (pins/speed)
      % "baud"       : Set baudrate
      % "down"       : Shutdown
      % "read"       : Read data from UART
      % "tap"        : Talk to device connected
      % "write"      : Send bytes over this UART
      % "exit"       : Exit

      Execute command, which is not on the list but exists outside
      of UART0 directory:

      esp32-uart0>uptime
      % Last boot was 17 seconds ago
      % Restart reason was "Board power-on"
      esp32-uart0>

To exit command directory command "exit" is used.
Note: Ctrl+Z is a hotkey for command "exit"



  Command Index (the main command tree)
  -------------------------------------


  "pin"     : Various pin (GPIO) commands.

            Set or read pin values, perform analogRead(), set pin modes, save/restore pin
            state, enable PWM and so on. It can be used for low frequency periodic signal
            generation

            Command sequence of arguments (which can be as small as just 1 argument) of which
            1st argument is always a pin number. Command allows to create tiny "programs" 
            (sequence of actions and delays), which are executed on pins (GPIOs).

            More information and examples on this command can be found
            in documentation file "docs/Pin_Commands.txt"  (related command: "show iomux")

  "pwm"    :  PWM generators.

            Enable/Disable PWM output on arbitrary pin. Frequency, duty cycle and hardware
            channel are selectable. Full description can be found in "docs/PWM.txt" 
            (related command: "show pwm")


  "count"  : Pulse counter / frequency meter.

            Allows for counting pulses / frequency measurement on an arbitrary pin. There 
            are 8 hardware counters on ESP32 (ESP32-S3 has only 4) which can be run 
            simultaneously. Supports delayed counting. 

            For details refer to "docs/Pulse_Counter.txt" (related command: "show counters")

  "var"    : Sketch variables manipulation. See "docs/Sketch_Variables.txt" on how to use 
           this feature in your code; Command is used to display/change sketch variables
           in runtime. Simple types and arrays of simple types are supported;

           Another use of this command is conerting numbers to/from binary/octal/dec/hex


  "iic"    : Enter I2C bus/interface mode. Configure and use (read/write/scan) specified 
           I2C bus.
           Detailed description of I2C commands is in "docs/I2C_Commands.txt"


  "uart" : UART X interface access. Configure and use (read/write/bridge) UART
           interface. Read "docs/UART_Commands.txt" for details on how to
           setup and use UART interfaces


"sequence" : Signal generator mode. Allow for custom signal patterns with 
             precise timings to be generated on any pin. See documentation file
             "docs/Pulse_Generator.txt" for more info. Simple patterns can also
             be generated by means of "pin" command (see "docs/Pin_Commands.txt")
             (related command: "show sequence")
              

"files"  : Enter file manager mode. This mode allows user to perform basic file 
           system commands (list directory contens, file and directory creation,
           file editing and file transfer). Details are in "docs/Filesystem_Commands.txt"


"show"   : Display various information. Descriptions are fragmented along all the
           documentation files


"suspend"
"resume"
"kill"   : Process control commands: kill, suspend or resume a task. These 3 
           commands are described in "docs/Kill_Suspend_Resume.txt" and are used
           according to their names: to suspend/resume or terminate a process 
          (a FreeRTOS task or a background ESPShell command) 

"echo"
"history"
"colors"
"tty"      : These 4 commands are used to control input and output of the shell;
             Read "docs/Extra_Commands.txt" for details on command syntax and detailed 
             description.



  A few simple commands which have no dedicated documentation file
  ----------------------------------------------------------------


"uptime"   : Shows how much time has passed since last boot; shows the last 
             reboot cause

"cpu FREQ" : Set CPU frequency to FREQ MHz. List of supported frequencies is 
             displayed on attempt to set unsupported frequency:
         
             Example:   
                 esp32#>cpu 99
                 % Supported frequencies are: 240, 160, 120, 80, 40, 20 and 10

               
"reload"   : Reboots ESP32. This is a software restart which does not reset hardware
             (peripherial) registers;

"nap [SEC]": Put CPU into **light sleep** mode.
             Without arguments puts CPU into sleep until any UART activity:  
             CPU wakes up by UART (press any key to wake up). Wake up condition is 3 
             positive edges. It is recommended to use <Enter> as an abort key
                                  

             With aegument (sleep time in seconds, SEC)
             Puts CPU into light sleep for SEC seconds, CPU wakes up by timer, there are
             no other ways to cancel it

