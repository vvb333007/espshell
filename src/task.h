/* 
 * This file is a part of the ESPShell Arduino library (Espressif's ESP32-family CPUs)
 *
 * Latest source code can be found at Github: https://github.com/vvb333007/espshell/
 * Stable releases: https://github.com/vvb333007/espshell/tags
 *
 * Feel free to use this code as you wish: it is absolutely free for commercial and 
 * non-commercial, education purposes.  Credits, however, would be greatly appreciated.
 *
 * Author: Viacheslav Logunov <vvb333007@gmail.com>
 */

// -- Tasks --
// Along with "qlib", the "task" module contains OS Abstraction Layer, implemented as thin wrappers
// This allows for easier porting to other architectures
//
// Thin wrapper for FreeRTOS' task functions, command handlers related to tasks
// Main purpose is to move all FreeRTOS specific code into one or two files while rest of the code
// will use its own functions or/and defines
//
// Overhead, usually associated with wrappers is minimal or zero

#if COMPILING_ESPSHELL

#define task_t     TaskHandle_t
#define taskfunc_t TaskFunction_t

#define TASK_MAX_PRIO 24 // use macro from IDF/FreeRTOS
#define TASK_MIN_PRIO 0

extern task_t  loopTaskHandle; // task handle of a task which calls Arduino's loop(). Defined somewhere in the ESP32 Arduino Core
static task_t  shell_task = 0; // Main espshell task ID
static uint8_t shell_prio = 0; // Default priority is IDLE. Inherited by spawned tasks
static uint8_t shell_core = 0; // CPU core number ESPShell is running on. For single core systems it is always 0
                               // Tasks, that are created by ESPShell are pinned to the "shell_core" core
                               // TODO: make it a convar; add ability to set NO_AFFINITY value

// Signals for use in task_signal(), task_signal_from_isr() and task_wait_for_signal() functions
//
#define SIGNAL_TERM 0  // Request to terminate. (Must be zero, DO NOT CHANGE its default value)
#define SIGNAL_GPIO 1  // "Pin interrupt" signal. Generated by GPIO ISR.
#define SIGNAL_KILL 2  // Force task deletion. This value can be sent but can't be received
#define SIGNAL_HUP  3  // "Reinitialize/Re-read configuration" (Unused, for future extensions)

// Remember & Forget task IDs. We only need these if we are running
// on old Arduino Core version, where TraceUtility is disabled
//
#if CONFIG_FREERTOS_USE_TRACE_FACILITY  // Proper version:
#  define taskid_remember(value) {}     //  do nothing
#  define taskid_forget(value) {}       //  do nothing
#else                                   // Workaround:
static vsa_t *task_list = 0;            //  vsa to hold active tasks list
#  warning "TraceUtility is disabled in ESP-IDF: Limited task module functionality"
#  define taskid_remember(value) vsa_find_slot(&task_list, NULL, value, true) // "add new or overwrite existing value in the array"
#  define taskid_forget(value) \
     { \
       vsa_t *_vsa; \
       int slot = 0; \
       if ((_vsa = vsa_find_slot(&task_list, &slot, value, false)) != NULL) \
         _vsa->values[slot] = 0; \
     }
#endif // !CONFIG_FREERTOS_USE_TRACE_FACILITY

// Get current task id
#define taskid_self() \
  xTaskGetCurrentTaskHandle()

// Get task priority
#define task_get_priority(_TaskID) \
  ((unsigned int)uxTaskPriorityGet(_TaskID))

// Set task priority
#define task_set_priority(_TaskID, _Prio) \
  vTaskPrioritySet(_TaskID, _Prio)

// Resume
#define task_resume(_TaskID) \
  vTaskResume(_TaskID)

// Suspend
#define task_suspend(_TaskID) \
  vTaskSuspend(_TaskID)

// Kill
#define task_kill(_TaskID) \
  vTaskDelete(_TaskID)

// 
#define task_kill_self() \
  vTaskDelete(NULL)

#define task_by_name(_Name) \
  xTaskGetHandle(_Name)


// Start a new thread on the same core espshell is running, remember the task_id.
// With trace facility enabled, this and other macros here have zero overhead comparing to plain FreeRTOS API
// TODO: add "_Core" parameter?
#define task_new(_Func, _Arg, _Name) \
  ({ \
    task_t handle = NULL; \
    if (pdPASS == xTaskCreatePinnedToCore((TaskFunction_t)_Func, \
                                          _Name, \
                                          STACKSIZE, \
                                          _Arg, \
                                          shell_prio, /*TODO: uxTaskPriorityGet(NULL) ?*/ \
                                          &handle, \
                                          shell_core)) \
      taskid_remember(handle); \
    handle; \
  })

// Must be called by a task to finish its execution:
// FreeRTOS can not handle "return" from the task function. Instead, vTaskDelete must be called
//
#define task_finished() \
  { \
    taskid_forget(taskid_self()); \
    task_kill_self(); \
  }

// Task signalling wrappers. qlib is used in a few different projects so I try to keep it easily convertible to other API
// (POSIX for example). 

// Send a signal (uin32_t arbitrary value) to the task.If task was blocking on task_signal_wait() the task will unblock
// and receive signal value
#define task_signal(_Handle, _Signal) \
  xTaskNotify((task_t)(_Handle), _Signal, eSetValueWithOverwrite)

// Same as above but ISR-safe
#define task_signal_from_isr(_Handle, _Signal) \
  { \
    BaseType_t force_yield; \
    xTaskNotifyFromISR((task_t)(_Handle), _Signal, eSetValueWithOverwrite, &force_yield); \
    if (force_yield) \
      portYIELD_FROM_ISR(); \
  }

// Block until any signal is received but not longer than /timeout/ milliseconds. Value of 0xffffffff (DELAY_INFINITE) means "infinite timeout":
// function will block until it receives ANY signal; the signal value is returned in /*sig/, pointer can be NULL;
// 
// Returns /true/ if signal was received
// Returns /false/ if timeout has fired before any signal was received
//
static bool task_wait_for_signal(uint32_t *sig, uint32_t timeout_ms) {

  bool loop = false;
  uint32_t sig0;

  // portMAX_DELAY is not an infinite value, it is 0xffffffff which is about 1200 hours
  // thats we have /loop/ flag here
  if (timeout_ms == DELAY_INFINITE) {
    timeout_ms = portMAX_DELAY;
    loop = true;
  } else 
    timeout_ms = pdMS_TO_TICKS(timeout_ms); 
 
  if (NULL == sig)
    sig = &sig0;

  // block until any notification or timeout
  if (!loop)
    return xTaskNotifyWait(0, 0xffffffff, sig, timeout_ms ) == pdPASS;

  // block until any notification
  while( xTaskNotifyWait(0, 0xffffffff, sig, timeout_ms ) != pdPASS ) {}

  return true;
}


// Can we perform commands on this taskid?
// The task must be not the espshell's main task AND taskid must be in a valid address range
//
static bool is_taskid_good(unsigned int taskid) {

  if (!is_valid_address((void *)taskid,sizeof(task_t))) {
    HELP(q_print("% Task ID you entered seems to be invalid\r\n"
                 "% Task ID is a <i>hex number</>, something like \"3ffb0030\" or \"0x40005566\"\r\n"));
    return false;
  }
  
  // Ignore attempts to manipulate the main espshell task
  if (shell_task == (task_t )taskid) {
    HELP(q_printf("%% Task <i>0x%x</> is the main espshell task, access denied :)\r\n",taskid));
    return false;
  }

  return true;
}

// check if *this* task (a caller) is executed as separate (background) task
// or it is executed in context of ESPShell
//
static INLINE bool is_foreground_task() {
  return shell_task == taskid_self();
}

static INLINE bool is_background_task() {
  return shell_task != taskid_self();
}


// A task argument for the ..._helper_task(). We can only have 1 argument 
// to the function so we use this temporary struct
//
struct helper_arg {
  struct helper_arg        *next;     // TODO: make a union of these 3 pointers?
  struct alias             *al;
  argcargv_t               *aa;
  uint32_t                  delay_ms;
  __typeof__(Context)       context;
  const struct keywords_t  *keywords;
};


// Once allocated, structures never freed. Instead they are put on the "unused" list
// Since alias_exec_in_background() is called everytime condition is triggered, we want our alloc/free
// to be as fast as possible - thats why ha_get() and ha_put(). 
// Second reason is to keep pointers persistent - so any stored pointer always points 
// to a valid memory region
//
static struct helper_arg *ha_unused = NULL;
static mutex_t ha_mux = MUTEX_INIT;

// Allocate / Reuse
//
static struct helper_arg *ha_get() {

  struct helper_arg *ret;

  mutex_lock(ha_mux);
  if ((ret = ha_unused) != NULL)
    ha_unused = ha_unused->next;
  mutex_unlock(ha_mux);

  return ret ? ret : (struct helper_arg *)q_malloc(sizeof(struct helper_arg ), MEM_TMP);
}

// Deallocate / Put on the unused list
//
static void ha_put(struct helper_arg *ha) {
  if (ha != NULL) {
    mutex_lock(ha_mux);
    ha->next = ha_unused;
    ha_unused = ha;
    mutex_unlock(ha_mux);
  }
}

// Older versions of  ESP-IDF had FreeRTOS Trace Facility disabled, so we had to use an ugly workaround 
// (see taskid_remember(), taskid_forget())
// 
// Workaround is ok, but has it disadvantages:
//   1. system tasks become invisible to ESPShell (Tmr Svc, ipc0, ipc1, IDLE0, IDLE1, esp_timer)
//   2. "show tasks" will not display anything except task ID. Even names will be inaccessible.
//
// Better approach is to stick to trace utility API, which somehow became available in latest Arduino Core's ESP-IDF.
// ESP-IDF that is used in Arduino Core is lagging well behind the main branch, so when I checked it last year, 
// Arduino Core of that time had Trace Facility disabled (to reenable it one have to recompile esp-idf libs which 
// may be tricky)
//
// I missed the moment when Espressif had added Trace Utility support, so instead of "#if esp_idf_version < x.x.x" 
// we use macro CONFIG_FREERTOS_USE_TRACE_FACILITY from the IDF config
//

// Proper version:
#if CONFIG_FREERTOS_USE_TRACE_FACILITY

// FreeRTOS task state names (eTaskState)
// These are fetched as part of TaskState_t structure in cmd_show_tasks()
//
static const char *task_state_name[] = { 
  "Running  ",
  "Ready    ",
  "Waiting  ",
  "Suspended",
  "Deleted  ",
  "Invalid  "
};

//"show tasks"
// Shows task ID FreeRTOS is aware of
// Use FreeRTOS Trace Utility to access list of kernel tasks
// Totally ignore task ids from locally managed VSA
//
static int cmd_show_tasks(int argc, char **argv) {
  int j = 0,nt;

  if ((nt = uxTaskGetNumberOfTasks()) > 0) {

    //TODO: allocate on heap, stack is limited
    TaskStatus_t tasks[nt]; 
    memset(tasks,0,sizeof(TaskStatus_t) * nt);

    // Fetch all tasks states & other information.
    // Creates a lag, because disables scheduling completely during information gathering
    uxTaskGetSystemState( tasks, nt, NULL);

    q_print("%<r>  # |  Task  ID  |        Name      | Prio |   State   | Stack/(HighWM)   </>\r\n"
            "%----+------------+------------------+------+-----------+------------------\r\n");

    for (j = 0; j < nt; j++) {
      // just in case. you never know when they decide to update their eStatus enum
      if (tasks[j].eCurrentState > 5)
        tasks[j].eCurrentState = 5;

      const char *warn = "<x>!";
      if (tasks[j].usStackHighWaterMark > 1023)
        warn = " ";

      q_printf("%% %3u| %p | %16s |  %2u  | %s |%s%p (%u)</>\r\n",
        j + 1,
        tasks[j].xHandle,
        tasks[j].pcTaskName,
        tasks[j].uxCurrentPriority,
        task_state_name[tasks[j].eCurrentState],
        warn,
        tasks[j].pxStackBase,
        (unsigned int)tasks[j].usStackHighWaterMark);
    }
  }
  q_printf("%%----+------------+------------------+------+-----------+------------------\r\n"
           "%% Total: %u tasks. <x>low HighWM</> values MAY indicate stack overflow risks\r\n",j);
  return 0;
}
#else //!CONFIG_FREERTOS_USE_TRACE_FACILITY
//
//"show tasks"
// Shows task ID espshell is aware of (loopTask + all task ids recorded via taskid_remember())
// No system tasks will be displayed (i.e. IDLE0, ipc0, Tmr Svc, etc)
//
static int cmd_show_tasks(int argc, char **argv) {
  int j = 0;

  // Source task ID's from locally maintained variable-sized array of task IDs
  vsa_t *v = task_list;
  MUST_NOT_HAPPEN(task_list == NULL); // there must be at least 1 task, espshell task

  q_print("% Running tasks (user tasks):\r\n");

  q_print("%<r>  # |  Task  ID  |        Name      | Prio |   State   </>\r\n"
          "%----+------------+------------------+------+-----------\r\n");
  while(v) {
    for (int i = 0; i < VSASIZE/sizeof(vsaval_t); i++)
      if (v->values[i])
          q_printf("%% %3u| %p | %16s |  %2u  | %s\r\n",++j,v->values[i], "N/A", 0, 0);
    v = v->next;
  }
  q_printf("%%----+------------+------------------+------+-----------\r\n"
           "%% Total: %u tasks\r\n",j);
  return 0;
}
#endif



//"suspend"
// suspends main Arduino task (i.e loop()) or any other task
//
static int cmd_suspend(int argc, char **argv) {

  task_t taskid;
  task_t sus = loopTaskHandle;
  if (argc > 1) {
    if (q_isnumeric(argv[1]))
      taskid = (task_t)hex2uint32(argv[1]);
    else
      taskid = task_by_name(argv[1]);
    if (is_taskid_good((uint32_t)taskid)) 
      sus = taskid; 
    else 
      return 1;
  }
  task_suspend(sus);
  
  return 0;
}

//"resume"
// Resume previously suspended task
//
static int cmd_resume(int argc, char **argv) {
  task_t taskid;
  task_t sus = loopTaskHandle;
  if (argc > 1) {
    if (q_isnumeric(argv[1]))
      taskid = (task_t)hex2uint32(argv[1]);
    else
      taskid = task_by_name(argv[1]);
    if (is_taskid_good((uint32_t )taskid))
      sus = taskid;
    else
      return 1;
  }
  task_resume(sus);
  return 0;
}

//"kill [-term|-kill|-9|-15] TASK_ID|TASK_NAME"
// 1. Stop a background command
// 2. Terminate arbitrary FreeRTOS task
// 
static int cmd_kill(int argc, char **argv) {

  unsigned int sig = SIGNAL_TERM, i = 1;
  task_t taskid;
  if (argc < 2)
    return CMD_MISSING_ARG;

  if (argv[i][0] == '-' && argv[i][1]) { // an option, task id follows
    q_tolower(argv[i]);
#if 0    
    if (!q_strcmp(argv[i],"-term") || !q_strcmp(argv[i],"-15")) sig = SIGNAL_TERM; else
    if (!q_strcmp(argv[i],"-hup")  ||  !q_strcmp(argv[i],"-1")) sig = SIGNAL_HUP;  else
    if (!q_strcmp(argv[i],"-kill") || !q_strcmp(argv[i],"-9"))  sig = SIGNAL_KILL; else return 1;
#else
    if (argv[i][1] == 't' || (argv[i][1] == '1' && argv[i][2] == '5')) sig = SIGNAL_TERM; else
    if (argv[i][1] == 'h' || (argv[i][1] == '1' && argv[i][2] == 0)) sig = SIGNAL_HUP; else
    if (argv[i][1] == 'k' || (argv[i][1] == '9' && argv[i][2] == 0)) sig = SIGNAL_KILL; else return 1;
#endif    
    i++;
  }

  if (i >= argc)
    return CMD_MISSING_ARG;

  if (q_isnumeric(argv[i]))
    taskid = (task_t)hex2uint32(argv[i]);
  else
    taskid = task_by_name(argv[i]);

  if (is_taskid_good((uint32_t)taskid)) {
    // SIGNAL_KILL is never sent to a task. Instead, task is deleted.
    if (sig == SIGNAL_KILL) {
      task_suspend((task_t )taskid);
      q_delay(1);
      task_kill((task_t )taskid);
      taskid_forget((task_t )taskid);
      HELP(q_printf("%% Killed: \"%p\"\r\n", taskid));
    } else
      // -term, -hup and other signals are sent directly to the task
      task_signal(taskid, sig);
  } else
    return i;
  return 0;
}

// Set task priority (0..24)
// "prio (0..24) [TASK_ID]"
// Can be used in aliases to raise priority during exec (in this case use "prio NUM", 
// as task id is not yet known and cant be provided to the command)
// 
static int cmd_priority(int argc, char **argv) {

  task_t taskid;
  unsigned char prio;

  if (argc < 2)
    return CMD_MISSING_ARG;
  
  if ((prio = q_atoi(argv[1],configMAX_PRIORITIES)) >= configMAX_PRIORITIES) {
    HELP(q_printf("%% Out of range. Range is [0..%u] (0 is the lowest priority)\r\n", configMAX_PRIORITIES - 1));
    return 1;
  }

  // sizeof(task_t) must be equal to sizeof(uint32_t) - this is checked as static_assert in espshell.h

  if (argc > 2) {

    if (q_isnumeric(argv[2]))
      taskid = (task_t)hex2uint32(argv[2]);
    else
      taskid = task_by_name(argv[2]);

    if (!is_taskid_good((uint32_t )taskid))
      return 2;
  } else
    taskid = NULL; // self
  
  // Save priority value if it was for ESPShell main task: new tasks will inherit this priority
  // Double check: shell task id can be passed as an argument, causing taskid != NULL
  if ((!taskid && is_foreground_task()) || taskid == shell_task)
    shell_prio = prio;

  task_set_priority(taskid, (UBaseType_t )prio);

  return 0;
}


#endif // COMPILING_ESPSHELL

